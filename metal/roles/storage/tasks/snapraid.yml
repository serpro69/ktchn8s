---
- name: Validate parity drives configuration
  assert:
    that:
      - parity_drives is defined
      - parity_drives | length > 0
      - data_drives is defined
      - data_drives | length > 0
    fail_msg: "Cannot configure snapraid: parity_drives or data_drives is empty or undefined"
    success_msg: "Parity drives validation passed: {{ parity_drives | length }} parity drive(s), {{ data_drives | length }} data drive(s)"

- name: Install snapraid dependencies
  package:
    name:
      - build-essential
      - git
      - wget
    state: present

- name: Create snapraid build directory
  tempfile:
    state: directory
  register: snapraid_build_dir

- name: Download snapraid source
  get_url:
    url: "{{ snapraid_url }}"
    dest: "{{ snapraid_build_dir.path }}/snapraid-{{ snapraid_version }}.tar.gz"
    mode: '0644'

- name: Extract snapraid source
  unarchive:
    src: "{{ snapraid_build_dir.path }}/snapraid-{{ snapraid_version }}.tar.gz"
    dest: "{{ snapraid_build_dir.path }}"
    remote_src: true
    creates: "{{ snapraid_build_dir.path }}/snapraid-{{ snapraid_version }}"

- name: Configure snapraid build
  command: ./configure
  args:
    chdir: "{{ snapraid_build_dir.path }}/snapraid-{{ snapraid_version }}"
    creates: "{{ snapraid_build_dir.path }}/snapraid-{{ snapraid_version }}/Makefile"

- name: Build snapraid
  command: make -j{{ ansible_processor_vcpus }}
  args:
    chdir: "{{ snapraid_build_dir.path }}/snapraid-{{ snapraid_version }}"
    creates: "{{ snapraid_build_dir.path }}/snapraid-{{ snapraid_version }}/snapraid"

- name: Install snapraid
  command: make install
  args:
    chdir: "{{ snapraid_build_dir.path }}/snapraid-{{ snapraid_version }}"
    creates: /usr/local/bin/snapraid
  become: true

- name: Create snapraid configuration
  template:
    src: snapraid.conf.j2
    dest: /etc/snapraid.conf
    owner: root
    group: root
    mode: '0644'
    backup: true
  notify: initial snapraid sync

- name: Create snapraid-runner script directory
  file:
    path: /opt/snapraid-runner
    state: directory
    mode: '0755'

- name: Download snapraid-runner
  get_url:
    url: "{{ snapraid_runner_url }}"
    dest: /opt/snapraid-runner/snapraid-runner.py
    mode: '0755'

- name: Create snapraid-runner config
  template:
    src: snapraid-runner.conf.j2
    dest: /opt/snapraid-runner/snapraid-runner.conf
    owner: root
    group: root
    mode: '0644'

- name: Create snapraid-runner systemd service
  template:
    src: snapraid-runner.service.j2
    dest: /etc/systemd/system/snapraid-runner.service
    owner: root
    group: root
    mode: '0644'
  notify:
    - reload systemd

- name: Create snapraid-runner systemd timer
  template:
    src: snapraid-runner.timer.j2
    dest: /etc/systemd/system/snapraid-runner.timer
    owner: root
    group: root
    mode: '0644'
  notify:
    - reload systemd
    - restart snapraid-runner

- name: Enable snapraid-runner timer
  systemd:
    name: snapraid-runner.timer
    enabled: "{{ snapraid_maintenance.sync_enabled }}"
    daemon_reload: true

# =================================================================
# MAINTENANCE AND LOGGING CONFIGURATION
# =================================================================

- name: Create snapraid log directory
  file:
    path: /var/log/snapraid
    state: directory
    mode: '0755'
    owner: root
    group: root

- name: Install msmtp for email notifications
  package:
    name: msmtp
    state: present
  when: snapraid_maintenance.email_enabled

- name: Create msmtp configuration
  template:
    src: msmtprc.j2
    dest: /etc/msmtprc
    owner: root
    group: root
    mode: '0600'
    backup: true
  when: snapraid_maintenance.email_enabled

- name: Configure logrotate for snapraid logs
  template:
    src: snapraid-logrotate.j2
    dest: /etc/logrotate.d/snapraid
    owner: root
    group: root
    mode: '0644'

# =================================================================
# MONTHLY SCRUB CONFIGURATION
# =================================================================

- name: Create snapraid-scrub systemd service
  template:
    src: snapraid-scrub.service.j2
    dest: /etc/systemd/system/snapraid-scrub.service
    owner: root
    group: root
    mode: '0644'
  notify:
    - reload systemd
  when: snapraid_maintenance.scrub_enabled

- name: Create snapraid-scrub systemd timer
  template:
    src: snapraid-scrub.timer.j2
    dest: /etc/systemd/system/snapraid-scrub.timer
    owner: root
    group: root
    mode: '0644'
  notify:
    - reload systemd
  when: snapraid_maintenance.scrub_enabled

- name: Enable snapraid-scrub timer
  systemd:
    name: snapraid-scrub.timer
    enabled: "{{ snapraid_maintenance.scrub_enabled }}"
    daemon_reload: true
  when: snapraid_maintenance.scrub_enabled

# =================================================================
# CONTENT FILE BACKUP
# =================================================================

- name: Create content file backup directory
  file:
    path: /var/backups/snapraid
    state: directory
    mode: '0755'
    owner: root
    group: root
  when: snapraid_maintenance.content_backup_enabled

- name: Create content file backup script
  copy:
    content: |
      #!/bin/bash
      # SnapRAID content file backup script
      BACKUP_DIR="/var/backups/snapraid"
      BACKUP_COUNT={{ snapraid_maintenance.content_backup_count }}
      TIMESTAMP=$(date +%Y%m%d-%H%M%S)

      # Backup all content files
      for content_file in $(grep -E '^content ' /etc/snapraid.conf | awk '{print $2}'); do
        if [ -f "$content_file" ]; then
          filename=$(basename "$content_file")
          cp -p "$content_file" "$BACKUP_DIR/${filename}.${TIMESTAMP}"
        fi
      done

      # Keep only last N backups
      for content_file in $(grep -E '^content ' /etc/snapraid.conf | awk '{print $2}'); do
        filename=$(basename "$content_file")
        ls -t "$BACKUP_DIR/${filename}".* 2>/dev/null | tail -n +$((BACKUP_COUNT + 1)) | xargs -r rm -f
      done
    dest: /usr/local/bin/snapraid-content-backup.sh
    mode: '0755'
    owner: root
    group: root
  when: snapraid_maintenance.content_backup_enabled

- name: Create content backup systemd service
  copy:
    content: |
      [Unit]
      Description=Backup SnapRAID content files

      [Service]
      Type=oneshot
      ExecStart=/usr/local/bin/snapraid-content-backup.sh
      User=root
      Group=root
    dest: /etc/systemd/system/snapraid-content-backup.service
    mode: '0644'
    owner: root
    group: root
  notify:
    - reload systemd
  when: snapraid_maintenance.content_backup_enabled

- name: Create content backup systemd timer
  copy:
    content: |
      [Unit]
      Description=Backup SnapRAID content files daily

      [Timer]
      OnCalendar=daily
      Persistent=true

      [Install]
      WantedBy=timers.target
    dest: /etc/systemd/system/snapraid-content-backup.timer
    mode: '0644'
    owner: root
    group: root
  notify:
    - reload systemd
  when: snapraid_maintenance.content_backup_enabled

- name: Enable content backup timer
  systemd:
    name: snapraid-content-backup.timer
    enabled: "{{ snapraid_maintenance.content_backup_enabled }}"
    daemon_reload: true
  when: snapraid_maintenance.content_backup_enabled

- name: Cleanup build directory
  file:
    path: "{{ snapraid_build_dir.path }}"
    state: absent