{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"~/","text":""},{"location":"#ktchn8s","title":"ktchn8s","text":"<p>...there's no place like <code>~</code></p> <p>\ud83d\udea7 Fork in progress, expect some dust \ud83d\udea7</p> <p> </p> <p><code>/\u02c8k\u026at\u0283.\u0259n.e\u026ats/</code> (\u201cKitch-en-ates\u201d)</p> <p>A homelab \u2638\ufe0f kubernetes cluster \ud83d\udc7e ...right in your kitchen \ud83d\ude80\ud83d\udca5</p> <p> Features \u27e9  Getting Started \u27e9  Documentation</p>"},{"location":"#about","title":"About","text":"<p>This project utilizes Infrastructure as Code and GitOps to automate provisioning, operating, and updating self-hosted services in my homelab. It can also be used as a framework to build your own homelab.</p> <p>If you encounter an issue or want to contribute a fix or an improvement, please create a bug issue. If you have a question or want to chat about this project, please create a new discussion.</p>"},{"location":"#overview","title":"Overview","text":"<p>This project is still in the experimental stage. This means, among other things, that:</p> <ul> <li>There might be breaking changes that may require a complete redeployment.</li> <li>A proper upgrade path is planned for the stable release.</li> </ul> <p>More information can be found in the roadmap.</p>"},{"location":"#hardware","title":"Hardware","text":"<ul> <li>Network:<ul> <li>Cisco C1111-8P Router</li> <li>Cisco C3560-GS-8P Switch</li> <li>Eero 6 Router (used as access-point for WiFi at home)</li> </ul> </li> <li>Servers:<ul> <li>1 x NAS<ul> <li>Fractal Design Node 804 case</li> <li>CWWK/Topton J6413 motherboard</li> <li>CPU: <code>Intel Celeron J6413</code></li> <li>RAM: 2x <code>16GB DDR4</code></li> <li>SSD: 2x <code>512GB WD RED NVME</code> in a zfs mirror (OS)</li> <li>HDD: 6x <code>18TB Seagate Exos</code> (Storage)</li> </ul> </li> <li>1 \u00d7 Lenovo Tiny M70q Gen.3<ul> <li>CPU: <code>Intel Core i5-12400T</code></li> <li>RAM: 2x <code>16GB DDR4</code></li> <li>SSD: <code>256GB NVME</code></li> </ul> </li> <li>2 \u00d7 Lenovo Tiny M70q Gen.3<ul> <li>CPU: <code>Intel Core i5-12400T</code></li> <li>RAM: <code>16GB DDR4</code></li> <li>SSD: <code>256GB NVME</code></li> </ul> </li> <li>2 \u00d7 Lenovo Tiny M70q Gen.2<ul> <li>CPU: <code>Intel Core i5-11400T</code></li> <li>RAM: <code>16GB DDR4</code></li> <li>SSD: <code>256GB NVME</code></li> </ul> </li> <li>7 \u00d7 Lenovo Tiny M720q<ul> <li>CPU: <code>Intel Core i5-8100T</code></li> <li>RAM: <code>16GB</code></li> <li>SSD: <code>512GB NVME</code></li> </ul> </li> <li>1 x HP EliteDesk 800 G3 Mini<ul> <li>CPU: <code>Intel Core i5-7500 vPro</code></li> <li>RAM: <code>16GB</code></li> <li>SSD: <code>256GB SATA</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li> Common applications: Gitea, Jellyfin, Paperless...</li> <li> Automated bare metal provisioning with PXE boot</li> <li> Automated Kubernetes installation and management</li> <li> Installing and managing applications using GitOps</li> <li> Automatic rolling upgrade for OS and Kubernetes</li> <li> Automatically update apps (with approval)</li> <li> Modular architecture, easy to add or remove features/components</li> <li> Automated certificate management</li> <li> Automatically update DNS records for exposed services</li> <li> VPN (Tailscale or Wireguard)</li> <li> Expose services to the internet securely with Cloudflare Tunnel</li> <li> CI/CD platform</li> <li> Private container registry</li> <li> Distributed storage</li> <li> Support multiple environments (dev, prod)</li> <li> Monitoring and alerting</li> <li> Automated backup and restore</li> <li> Single sign-on</li> <li> Infrastructure testing</li> </ul> <p>Some demo videos and screenshots are shown here. They can't capture all the project's features, but they are sufficient to get a concept of it.</p> Demo Showcase Homepage powered by... Homepage Git server powered by Gitea Continuous Integration with Woodpecker CI Continuous Deployment with ArgoCD Identity Management with Kanidm Monitoring with Grafana"},{"location":"#getting-started","title":"Getting Started","text":"<p>Deploy on real hardware for production workload.</p> <p>...or simply:</p> <pre>\n<code>\n           \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n           \u2502                        \ud83d\udc27                        \u2502\n           \u2502    \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e    \u2502\n           \u2502    \u2502$ nix develop                           \u2502    \u2502\n           \u2502    \u2502$ make ktchn8s                          \u2502    \u2502\n           \u2502    \u2502...                                     \u2502    \u2502\n           \u2502    \u2502                                        \u2502    \u2502\n           \u2502    \u2502                                        \u2502    \u2502\n           \u2502    \u2502                                        \u2502    \u2502\n           \u2502    \u2502                                        \u2502    \u2502\n           \u2502    \u2502 \ud83d\ude80                                     \u2502    \u2502\n           \u2502    \u2502                                        \u2502    \u2502\n           \u2502    \u2502                                        \u2502    \u2502\n           \u2502    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f    \u2502\n           \u2502                                                  \u2502\n           \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n                   \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n               \u256d\u2500\u2500\u2500|\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500|\u2500\u2500\u2500\u256e\n             _-'    .-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.  --- `-_\n          _-'.-.-. .---.-.-.-.-.-.-.-.-.-.-.-.-.-.-.--.  .-.-.`-_\n       _-'.-.-.-. .---.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-`__`. .-.-.-.`-_\n    _-'.-.-.-.-. .-----.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-----. .-.-.-.-.`-_\n _-'.-.-.-.-.-. .---.-. .-------------------------. .-.---. .---.-.-.-.`-_\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2570\u2500\u2500\u2500._.\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500._.\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"#roadmap","title":"Roadmap","text":"<p>See roadmap and open issues for a list of proposed features and known issues.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Any contributions you make are greatly appreciated.</p> <p>Please see contributing guide for more information.</p>"},{"location":"#license","title":"License","text":"<p>Copyright \u00a9 2025 - present, serpro69</p> <p>Distributed under the MIT License. See license page or <code>LICENSE.md</code> file for more information.</p>"},{"location":"concepts/","title":"Concepts","text":"<ul> <li>Certificate Management</li> <li>Dev Shell</li> <li>PXE Boot</li> <li>Secrets Management</li> </ul>"},{"location":"concepts/certificate_management/","title":"Certificate management concepts","text":"<p>Certificates are generated and managed by cert-manager with Let's Encrypt. By default certificates are valid for 90 days and will be renewed after 60 days.</p> <p>cert-manager watches <code>Ingress</code> resources across the cluster. When you create an <code>Ingress</code> with a supported annotation:</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    cert-manager.io/cluster-issuer: letsencrypt-prod\n  name: foo\nspec:\n  rules:\n    - host: foo.example.com\n      # ...\n  tls:\n    - hosts:\n        - foo.example.com\n      secretName: foo-tls-certificate\n</code></pre> <pre><code>flowchart LR\n  User -- 6 --&gt; Ingress\n\n  subgraph cluster[ktchn8s cluster]\n    Ingress --- Secret\n    Ingress -.- 1 -.-&gt; Certificate\n    Certificate -.- 5 -.-&gt; Secret\n    Certificate -- 2 --&gt; CertificateRequest -- 3 --&gt; Order -- 4 --&gt; Challenge\n  end\n\n  Order -.- ACMEServer[ACME server]\n\n  subgraph dnsprovider[DNS provider]\n    TXT\n  end\n\n  Challenge -- 4.a --&gt; TXT\n  ACMEServer -.- Challenge\n  ACMEServer -.- 4.b -.-&gt; TXT</code></pre>  Hold \"Alt\" / \"Option\" to enable Pan &amp; Zoom  <ol> <li>cert-manager creates a corresponding <code>Certificate</code> resources</li> <li>Based on the <code>Certificate</code> resource, cert-manager creates a <code>CertificateRequest</code> resource to request a signed certificate from the configured <code>ClusterIssuer</code></li> <li>The <code>CertificateRequest</code> will create an order with an ACME server (we use Let's Encrypt), which is represented by the <code>Order</code> resource</li> <li>Then cert-manager will perform a DNS-01 <code>Challenge</code>:<ol> <li>Create a DNS TXT record (contains a computed key)</li> <li>The ACME server retrieve this key via a DNS lookup and validate that we own the domain for the requested certificate</li> </ol> </li> <li>cert-manager stores the certificate (typically <code>tls.crt</code> and <code>tls.key</code>) in the <code>Secret</code> specified in the <code>Ingress</code> configuration</li> <li>Now you can access the HTTPS website with a valid certificate</li> </ol> <p>A much more detailed diagram can be found in the official documentation under certificate lifecycle.</p>"},{"location":"concepts/development_shell/","title":"Development shell concepts","text":"<p>A development shell makes it easy to get all of the dependencies needed to interact with your homelab. Nix with Flakes provides a convenient way to define and manage these dependencies in a reproducible manner.</p>"},{"location":"concepts/development_shell/#installation","title":"Installation","text":"<p>Info</p> <p>NixOS users can skip this step.</p> <p>Install Nix using one of the following methods:</p> <ul> <li>Official Nix installer</li> <li>Determinate Nix Installer</li> </ul> <p>If you're using the official installer, add the following to your <code>~/.config/nix/nix.conf</code> to enable Flakes:</p> <pre><code>experimental-features = nix-command flakes\n</code></pre>"},{"location":"concepts/development_shell/#usage","title":"Usage","text":"<p>Run the following command:</p> <pre><code>nix develop\n</code></pre> <p>It will open a shell and install all the dependencies defined in <code>flake.nix</code> file at the root of the project:</p> <pre><code>ktchn8s on \ue0a0 docs [!+] using \udb80\udd5f default/wlcm-tfstate-ffcb87 via \udb85\udd0e default via \u2744 impure (nix-shell-env)\n\u279c which mkdocs\n/nix/store/86p3knkm02c1ix9rfd3y1b53daybl9ag-python3-3.12.10-env/bin/mkdocs\n</code></pre> <p>Warning</p> <p>If you have a python virtual environment activated, you should deactivate it before entering the nix shell. The nix shell environment in this project will create (if not exists) and activate it's own python venv, which may create conflicts. You can also create a custom <code>nix</code> bash function that would deactivate any possibly-active virtualenv, and then run the <code>nix develop</code> itself.</p>"},{"location":"concepts/development_shell/#entering-the-nix-shell-automatically","title":"Entering the nix-shell automatically","text":"<p>If you have <code>direnv</code> installed, you can run <code>direnv allow</code> once and it will automatically enter the nix shell every time you <code>cd</code> into the project.</p>"},{"location":"concepts/development_shell/#using-your-shell-environment-within-nix-shell","title":"Using your shell environment within nix-shell","text":"<p>One of my outstanding pain points with Nix is that any time I'm in a nix shell, none of my stuff works the way I want it to... I have lots of aliases, fzf-based autocomplete thingy, tmux integrations, ..., and most importantly - strong feelings about how my shell should look like and behave.</p> <p>So how do I get my shell environment within a <code>nix-shell</code>? So far I've simply added the following aliases (which I found in this post) to my default (zsh) shell environment:</p> <pre><code>alias nix-shell='nix-shell --run $SHELL'\n\nnix() {\n  if [[ $1 == \"develop\" ]]; then\n    shift\n    # deactivate any possibly-active virtualenv\n    command -v deactivate &amp;&gt; /dev/null &amp;&amp; deactivate\n    command nix develop -c $SHELL \"$@\"\n  else\n    command nix \"$@\"\n  fi\n}\n</code></pre> <p>Having just started playing around with nix I don't know if this is an ideal solution, but I like to keep things simple and it does seem to work just fine.</p> <p>And now, instead of a default PS1 and no configs of my own:</p> <pre><code>\u279c nix develop\nrazorback:ktchn8s sergio$ ela\n\nbash: ela: command not found\n</code></pre> <p>I have all of my configs within the nix shell environment:</p> <pre><code>\u279c nix develop\n\nktchn8s on \ue0a0 docs [!+] using \udb80\udd5f default/wlcm-tfstate-ffcb87 via \udb85\udd0e default via \u2744 impure (nix-shell-env)\n\u279c ela\n\nPermissions Size User   Date Modified Name\ndrwxr-xr-x@    - sergio 28 May 16:53  .git/\n.rw-r--r--@  456 sergio 28 May 09:16  .yamlfmt.yaml\n.rw-r--r--@  291 sergio 28 May 09:16  .yamllint.yml\ndrwxr-xr-x@    - sergio 28 May 09:16  docs/\n.rw-r--r--@ 1.5k sergio 28 May 14:53  flake.lock\n.rw-r--r--@  772 sergio 28 May 16:32  flake.nix\n.rw-r--r--@ 1.1k sergio 28 May 09:16  LICENSE.md\n.rw-r--r--@ 1.3k sergio 28 May 14:43  mkdocs.yml\n.rw-r--r--@  117 sergio 28 May 09:15  README.md\n</code></pre>"},{"location":"concepts/development_shell/#searching-for-particular-commands-in-nix-packages","title":"Searching for particular commands in nix packages","text":"<p>Sometimes you may find yourself asking: \"What nix package provides the <code>foobar</code> command?\"</p> <p>Instead of going directly to search.nixos.org, you may want to try the <code>nix-search</code> tool, which lets you ask exactly the above question. It's also available as a flake <code>github:peterldowns/nix-search-cli</code>.</p> <p>Let's say we need the <code>ifconfig</code> command:</p> <pre><code>\u279c nix-search -p ifconfig\nunixtools.nettools @ 1003.1-2008 : ifconfig arp hostname netstat route\nunixtools.ifconfig @ 2.10 : ifconfig\ntoybox @ 0.8.12 : ifconfig [ acpi arch ascii ...\nnettools @ 2.10 : ifconfig arp dnsdomainname ...\ninetutils @ 2.6 : ifconfig dnsdomainname ftp ...\nbusybox @ 1.36.1 : ifconfig [ [[ acpid add-shell ...\n</code></pre> <p>Info</p> <p>You may wonder why you're seeing <code>/nix/store/.../bin/bash</code> when running <code>echo $SHELL</code> within the nix development environment, even though we've set the default shell to use <code>zsh</code>. <pre><code>\u279c which $SHELL\n/nix/store/xy4jjgw87sbgwylm5kn047d9gkbhsr9x-bash-5.2p37/bin/bash\n</code></pre> In nix, <code>SHELL</code> variable seems to point to the shell that the package derivation uses as its shell (which usually is <code>bash</code>). There's some more details about this behavior in this comment</p>"},{"location":"concepts/pxe_boot/","title":"PXE boot concepts","text":"<p>PXE (Preboot Execution Environment) boot lets a computer start up and load an operating system over a network, instead of from its hard drive or USB.</p>"},{"location":"concepts/pxe_boot/#what-is-pxe-boot","title":"What is PXE Boot?","text":"<p>Think of it like this:</p> <p>Imagine a computer with no software installed. When you turn it on, it uses PXE to say:</p> <p>\"Hey, is there a server on the network that can help me start up?\"</p> <p>If there is a server ready to help, it responds and says:</p> <p>\"Yes! Here\u2019s a small program you can run to get started.\"</p> <p>That small program helps the computer download more software (like a full operating system) to finish booting.</p>"},{"location":"concepts/pxe_boot/#key-services-in-pxe-boot-process","title":"Key Services in PXE Boot Process","text":""},{"location":"concepts/pxe_boot/#dhcp-dynamic-host-configuration-protocol-server","title":"DHCP (Dynamic Host Configuration Protocol) Server","text":"<p>Purpose: Gives the computer an IP address so it can communicate on the network.</p> <p>PXE Role: Also tells the computer where to find the boot server (often via a special option like next-server or option 66/67).</p>"},{"location":"concepts/pxe_boot/#tftp-trivial-file-transfer-protocol-server","title":"TFTP (Trivial File Transfer Protocol) Server","text":"<p>Purpose: Transfers small boot files (e.g., <code>pxelinux.0</code>, configuration files, kernel, initrd).</p> <p>Why TFTP? It\u2019s simple, doesn't require authentication, and works well during early boot stages when the client has limited functionality.</p> <p>PXE Role: Sends the actual files the computer needs to start booting.</p>"},{"location":"concepts/pxe_boot/#http-server","title":"HTTP Server","text":"<p>Purpose: Delivers larger files (e.g., operating system images, installation media).</p> <p>Why HTTP? TFTP is slow and limited; HTTP is faster and more efficient for big files.</p> <p>PXE Role: After the initial boot file loads, some PXE setups switch to HTTP to download the rest.</p>"},{"location":"concepts/pxe_boot/#step-by-step","title":"Step-by-Step","text":"<ul> <li> <p>Client:</p> <ul> <li>Power on.</li> <li>Initializing network boot sequence.</li> <li>Requesting PXE boot instructions.</li> </ul> </li> <li> <p>DHCP:</p> <ul> <li>Assigning IP address to client.</li> <li>Providing boot server details and bootloader path.</li> </ul> </li> <li> <p>Client:</p> <ul> <li>Requesting bootloader file from the specified boot server.</li> </ul> </li> <li> <p>TFTP:</p> <ul> <li>Transferring bootloader binary, configuration files, kernel image, and initrd to client.</li> </ul> </li> <li> <p>Client:</p> <ul> <li>Bootloader loaded.</li> <li>Parsing configuration to locate OS installer and necessary packages via HTTP.</li> </ul> </li> <li> <p>HTTP:</p> <ul> <li>Serving installation files and resources to client on demand.</li> </ul> </li> <li> <p>Client:</p> <ul> <li>Downloading OS components.</li> <li>Proceeding with installation and preparing for reboot.</li> </ul> </li> </ul> <p></p> <pre><code>sequenceDiagram\n    participant Client\n    participant DHCP_Server\n    participant TFTP_Server\n    participant HTTP_Server\n\n    %% DHCP exchange\n    Client-&gt;&gt;DHCP_Server: DHCPDISCOVER (with PXE options)\n    DHCP_Server--&gt;&gt;Client: DHCPOFFER (IP, next-server, boot filename)\n    Client-&gt;&gt;DHCP_Server: DHCPREQUEST\n    DHCP_Server--&gt;&gt;Client: DHCPACK\n\n    %% Bootloader download via TFTP\n    Client-&gt;&gt;TFTP_Server: Request bootloader (e.g., pxelinux.0)\n    TFTP_Server--&gt;&gt;Client: Transfer bootloader\n\n    %% Bootloader downloads additional files via TFTP\n    Client-&gt;&gt;TFTP_Server: Request config file (e.g., pxelinux.cfg/default)\n    TFTP_Server--&gt;&gt;Client: Transfer config file\n    Client-&gt;&gt;TFTP_Server: Request kernel and initrd\n    TFTP_Server--&gt;&gt;Client: Transfer kernel and initrd\n\n    %% Bootloader executes and may switch to HTTP\n    Client-&gt;&gt;Client: Load and execute kernel/initrd\n\n    %% If using HTTP for install\n    Client-&gt;&gt;HTTP_Server: Request installer, scripts, packages, etc.\n    HTTP_Server--&gt;&gt;Client: Serve installation files\n\n    %% Final steps\n    Client-&gt;&gt;Client: Begin OS installation and reboot</code></pre>  Hold \"Alt\" / \"Option\" to enable Pan &amp; Zoom"},{"location":"concepts/pxe_boot/#why-use-pxe","title":"Why Use PXE?","text":"<ul> <li>Great for installing operating systems on many computers without USBs or CDs.</li> <li>Very useful for setting multiple computers at once w/o need for human intervention (read, automation).</li> </ul>"},{"location":"concepts/secrets-management/","title":"Secrets management concepts","text":""},{"location":"concepts/secrets-management/#overview","title":"Overview","text":"<ul> <li>Global secrets are stored in the <code>global-secrets</code> namespace.</li> <li>Integrate with GitOps using External Secrets Operator.</li> <li>Secrets that can be generated are automatically generated and stored in the <code>global-secrets</code> namespace.</li> </ul> <p>Info</p> <p>Despite the name External Secrets Operator, global secrets are created in the same cluster and synced to other namespaces using the Kubernetes provider.</p> <p>While not supported by default in this project, you can also use other external providers such as HashiCorp Vault, AWS Secret Manager, Google Cloud Secret Manager, Azure Key Vault, 1Password, etc.</p> <pre><code>flowchart TD\n  subgraph global-secrets-namespace[global-secrets namespace]\n    secret-generator[Secret Generator] -- generate if not exist --&gt; source-secrets[Source Secrets]\n  end\n\n  subgraph app-namespace[application namespace]\n    ExternalSecret -- create --&gt; Secret\n    App -- read --&gt; Secret\n  end\n\n  ClusterSecretStore -- read --&gt; source-secrets\n  ExternalSecret --- ClusterSecretStore</code></pre>  Hold \"Alt\" / \"Option\" to enable Pan &amp; Zoom"},{"location":"concepts/secrets-management/#randomly-generated-secrets","title":"Randomly generated secrets","text":"<p>This is useful when you want to generate random secrets like admin password and store in global secrets.</p> ./platform/global-secrets/files/secret-generator/config.yaml<pre><code>---\n# Gitea\n- name: gitea.admin\n  data:\n    - key: password\n      length: 32\n      special: true\n\n# Dex\n- name: dex.grafana\n  data:\n    - key: client_secret\n      length: 32\n      special: false\n- name: dex.gitea\n  data:\n    - key: client_secret\n      length: 32\n      special: false\n\n# Registry\n- name: registry.admin\n  data:\n    - key: password\n      length: 32\n      special: true\n\n# Woodpecker\n- name: woodpecker.agent\n  data:\n    - key: secret\n      length: 32\n      special: false\n\n# Paperless\n- name: paperless.admin\n  data:\n    - key: PAPERLESS_ADMIN_PASSWORD\n      length: 32\n      special: true\n</code></pre>"},{"location":"concepts/secrets-management/#extra-third-party-secrets","title":"Extra third-party secrets","text":"<p>For third-party secrets that you don't control, add them to <code>external/terraform.tfvars</code> under the <code>extra_secrets</code> key, then run <code>make external</code>.</p> <p>They will be available as a Secret named <code>external</code> in the <code>global-secrets</code> namespace. You can use it with <code>ExternalSecret</code> just like any other global secret.</p>"},{"location":"concepts/secrets-management/#how-secrets-are-pulled-from-global-secrets-to-other-namespaces","title":"How secrets are pulled from global secrets to other namespaces","text":"<p>When you apply an <code>ExternalSecret</code> object, for example:</p> <pre><code>apiVersion: external-secrets.io/v1\nkind: ExternalSecret\nmetadata:\n  name: gitea-admin-secret\n  namespace: gitea\nspec:\n  data:\n  - remoteRef:\n      conversionStrategy: Default\n      key: gitea.admin\n      property: password\n    secretKey: password\n  refreshInterval: 1h\n  secretStoreRef:\n    kind: ClusterSecretStore\n    name: global-secrets\n  target:\n    creationPolicy: Owner\n    deletionPolicy: Retain\n    template:\n      data:\n        password: '{{ .password }}'\n        username: gitea_admin\n      engineVersion: v2\n</code></pre> <p>This will create a corresponding Kubernetes secret:</p> <p><code>kubectl describe secrets -n gitea gitea-admin-secret</code></p> <pre><code>Name:         gitea-admin-secret\nNamespace:    gitea\nLabels:       &lt;none&gt;\nAnnotations:  reconcile.external-secrets.io/data-hash: &lt;REDACTED&gt;\n\nType:  Opaque\n\nData\n====\npassword:  32 bytes\nusername:  11 bytes\n</code></pre> <p>Please see the official documentation for more information:</p> <ul> <li>External Secrets Operator</li> <li>API specification</li> </ul>"},{"location":"guides/","title":"Guides","text":""},{"location":"guides/#how-to-guides","title":"How-To Guides","text":"<ul> <li>Add/Move/Remove a Node</li> <li>Backup and Restore</li> <li>Configuring Minicom</li> <li>Disable DHCP Proxy in Dnsmasq for PXE</li> <li>Expose Services to the World</li> <li>Manage Domains with Cloudflare</li> <li>Onboarding Users</li> <li>Running the Cluster on a Single Node</li> <li>Manage your Media</li> <li>Run Commands on Nodes</li> <li>Update Dependencies</li> <li>Update Documentation</li> <li>Update Device Firmware</li> <li>Use Both Github and Gitea</li> </ul>"},{"location":"guides/#troubleshooting-guides","title":"Troubleshooting Guides","text":"<ul> <li>Troubleshooting PXE Boot</li> <li>Troubleshooting Renovate</li> <li>Troubleshooting Rook-Ceph</li> </ul>"},{"location":"guides/how_to_add_or_remove_nodes/","title":"HowTo add, move (rename), or remove nodes","text":"<p>...or how to scale vertically. To replace the same node with a clean OS, remove it and add it again.</p>"},{"location":"guides/how_to_add_or_remove_nodes/#add-new-nodes","title":"Add new nodes","text":"<p>Tip</p> <p>You can add multiple nodes at the same time</p> <p>Add its details to the inventory at the end of the group (masters or workers):</p> metal/inventories/prod.yml<pre><code>diff --git a/metal/inventory/metal.yml b/metal/inventory/metal.yml\nindex aaaaaaa..bbbbbbb 100644\n--- a/metal/inventory/metal.yml\n+++ b/metal/inventory/metal.yml\n@@ -75,14 +77,14 @@ metal:\n     nodes:\n       hosts:\n+        bar:\n+          interface:\n+            host: bifrost\n+            interface: Gi0/6\n+          ansible_host: 10.10.10.21\n+          mac: aa:bb:cc:dd:ee:ff\n+          disk: sda\n+          network_interface: eno1\n         baz:\n             interface:\n                 host: bifrost\n</code></pre> <p>Install the OS and join the cluster:</p> <pre><code>make metal\n</code></pre> <p>That's it!</p>"},{"location":"guides/how_to_add_or_remove_nodes/#remove-a-node","title":"Remove a node","text":"<p>Danger</p> <p>It is highly recommended to remove nodes one at a time.</p> <p>Remove it from the inventory:</p> metal/inventories/prod.yml<pre><code>diff --git a/metal/inventories/prod.yml b/metal/inventories/prod.yml\nindex 123456..abcdef 100644\n--- a/metal/inventories/prod.yml\n+++ b/metal/inventories/prod.yml\n@@ -8,3 +8,4 @@ metal:\n     nodes:\n       hosts:\n         foo: {ansible_host: 10.10.10.23, mac: '...', disk: nvme0n1, network_interface: eno1}\n-        bar: {ansible_host: 10.10.10.24, mac: '...', disk: nvme0n1, network_interface: eno1}\n</code></pre> <p>Drain the node:</p> <pre><code>kubectl drain ${NODE_NAME} --delete-emptydir-data --ignore-daemonsets --force\n</code></pre> <p>Remove the node from the cluster</p> <pre><code>kubectl delete node ${NODE_NAME}\n</code></pre> <p>Shutdown the node:</p> <pre><code>ssh root@${NODE_IP} poweroff\n</code></pre> <p>Tip</p> <p>You can run <code>make remove NODE_NAME=bar</code> to achieve the above steps.  NB! this will also wipe the disk on the node!</p>"},{"location":"guides/how_to_add_or_remove_nodes/#rename-a-node","title":"Rename a node","text":"<p>Warning</p> <p>Make sure to stop and remove ephemeral pxe docker containers before you re-run <code>bootstrap</code>: <code>docker stop files-http-1 files-dnsmasq-1 &amp;&amp; docker rm files-http-1 files-dnsmasq-1</code></p> <p>First remove the node, then update the inventory file:</p> metal/inventories/prod.yml<pre><code>diff --git a/metal/inventories/prod.yml b/metal/inventories/prod.yml\nindex 123456..abcdef 100644\n--- a/metal/inventories/prod.yml\n+++ b/metal/inventories/prod.yml\n@@ -8,3 +8,4 @@ metal:\n     nodes:\n       hosts:\n         foo: {ansible_host: 10.10.10.23, mac: '...', disk: nvme0n1, network_interface: eno1}\n-        bar: {ansible_host: 10.10.10.24, mac: '...', disk: nvme0n1, network_interface: eno1}\n+        baz: {ansible_host: 10.10.10.24, mac: '...', disk: nvme0n1, network_interface: eno1}\n</code></pre> <p>After that, install the OS and join the cluster:</p> <pre><code>make metal\n</code></pre>"},{"location":"guides/how_to_alternate_dns_setup/","title":"HowTo use alternate DNS setup","text":"<p>Info</p> <p>Skip this step if you already use the included Cloudflare setup</p> <p>Before you can access the home page at https://home.example.com, you'll need to update your DNS config.</p> <p>Some options for DNS config (choose one):</p> <ul> <li>Change the DNS config at your domain registrar (already included and automated)</li> <li>Change the DNS config in your router (also works if you don't own a domain)</li> <li>Use nip.io (suitable for a test environment)</li> </ul>"},{"location":"guides/how_to_alternate_dns_setup/#at-your-domain-registrar-recommended","title":"At your domain registrar (recommended)","text":"<p>The default configuration is for Cloudflare DNS, but you can change the code to use other providers.</p>"},{"location":"guides/how_to_alternate_dns_setup/#in-your-router","title":"In your router","text":"<p>Tip</p> <p>If you don't have a domain, you can use the <code>home.arpa</code> domain (according to RFC-8375).</p> <p>You can add each subdomain one by one, or use a wildcard <code>*.example.com</code> and point it to the IP address of the load balancer. To acquire a list of subdomains and their addresses, use this command:</p> <pre><code>./scripts/get-dns-config\n</code></pre>"},{"location":"guides/how_to_alternate_dns_setup/#use-nipio","title":"Use nip.io","text":"<p>Preconfigured in the <code>dev</code> branch.</p>"},{"location":"guides/how_to_backup_and_restore/","title":"HowTo backup and restore","text":"<p>Warning</p> <p>This guide is in a work-in-progress state.</p>"},{"location":"guides/how_to_backup_and_restore/#prerequisites","title":"Prerequisites","text":"<p>Create an S3 bucket to store backups. You can use AWS S3, Minio, or any other S3-compatible provider.</p> <ul> <li>For AWS S3, your bucket URL might look something like this:   <code>https://s3.amazonaws.com/my-homelab-backup</code>.</li> <li>For Minio, your bucket URL might look something like this:   <code>https://my-s3-host.example.com/homelab-backup</code>.</li> </ul> <p>Follow your provider's documentation to create a service account with the following policy (replace <code>my-homelab-backup</code> with your actual bucket name):</p> <pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:GetObject\",\n        \"s3:PutObject\",\n        \"s3:DeleteObject\",\n        \"s3:ListBucket\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::my-homelab-backup\",\n        \"arn:aws:s3:::my-homelab-backup/*\"\n      ]\n    }\n  ]\n}\n</code></pre> <p>Save the access key and secret key to a secure location, such as a password manager. While you're at it, generate a new password for Restic encryption and save it there as well.</p> <p>Example</p> <p>I use Minio for my homelab backups. Here's how I set it up:</p> <ul> <li>Create a bucket named <code>homelab-backup</code>.</li> <li>Create a service account under Identity -&gt; Service Accounts -&gt; Create   Service Account:<ul> <li>Enable Restrict beyond user policy.</li> <li>Paste the policy above.</li> <li>Click Create and copy the access key and secret key</li> </ul> </li> <li>I also set up Minio replication to store backups in two locations: one in   my house and one remotely.</li> </ul>"},{"location":"guides/how_to_backup_and_restore/#add-backup-credentials-to-global-secrets","title":"Add backup credentials to global secrets","text":"<p>Add the following to <code>external/terraform.tfvars</code>:</p> <pre><code>extra_secrets = {\n  restic-password = \"xxxxxxxxxxxxxxxxxxxxxxxx\"\n  restic-s3-bucket = \"https://s3.amazonaws.com/my-homelab-backup-xxxxxxxxxx\"\n  restic-s3-access-key = \"xxxxxxxxxxxxxxxx\"\n  restic-s3-secret-key = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}\n</code></pre> <p>Then apply the changes:</p> <pre><code>make external\n</code></pre> <p>You may want to back up the <code>external/terraform.tfvars</code> file to a secure location as well.</p>"},{"location":"guides/how_to_backup_and_restore/#add-backup-configuration-for-volumes","title":"Add backup configuration for volumes","text":"<p>Warning</p> <p>Do not run the backup command when building a new cluster where you intend to restore backups, as it may overwrite existing backup data. To restore data on a new cluster, refer to the restore from backup section.</p> <p>For now, you need to run a command to opt-in volumes until we have a better GitOps solution:</p> <pre><code>make backup\n</code></pre> <p>This command will set up Restic repositories and back up the volumes configured in <code>./Makefile</code>. You can adjust the list there to add or remove volumes from the backup. You only need to run this command once, the backup configuration will be stored in the cluster and run on a schedule.</p>"},{"location":"guides/how_to_backup_and_restore/#restore-from-backup","title":"Restore from backup","text":"<p>The restore process is ad-hoc, you need to run a command to restore application volumes:</p> <pre><code>make restore\n</code></pre> <p>The command above will restore the latest backup of recommended volumes. Like with backups, you can modify <code>./Makefile</code> to adjust the list of volumes you want to restore.</p>"},{"location":"guides/how_to_configure_minicom/","title":"HowTo configure <code>minicom</code>","text":"<ul> <li>Run <code>sudo minicom -s</code>, the following screen will appear:</li> </ul> <pre><code>+-----[configuration]------+\n| Filenames and paths      |\n| File transfer protocols  |\n| Serial port setup        |\n| Modem and dialing        |\n| Screen and keyboard      |\n| Save setup as dfl        |\n| Save setup as..          |\n| Exit                     |\n| Exit from Minicom        |\n+--------------------------+\n</code></pre> <ul> <li>Select Serial port setup and update your configuration settings to the following:</li> </ul> <pre><code>+-----------------------------------------------------------------------+\n| A -    Serial Device      : /dev/ttyUSB0                              |\n| B - Lockfile Location     : /var/lock                                 |\n| C -   Callin Program      :                                           |\n| D -  Callout Program      :                                           |\n| E -    Bps/Par/Bits       : 9600 8N1                                  |\n| F - Hardware Flow Control : No                                        |\n| G - Software Flow Control : No                                        |\n| H -     RS485 Enable      : No                                        |\n| I -   RS485 Rts On Send   : No                                        |\n| J -  RS485 Rts After Send : No                                        |\n| K -  RS485 Rx During Tx   : No                                        |\n| L -  RS485 Terminate Bus  : No                                        |\n| M - RS485 Delay Rts Before: 0                                         |\n| N - RS485 Delay Rts After : 0                                         |\n|                                                                       |\n|    Change which setting?                                              |\n+-----------------------------------------------------------------------+\n</code></pre> <p>Note</p> <p>You may need to adjust the serial device path (<code>/dev/ttyUSB0</code>) based on your system and the type of cable you use. You can find the correct path by running <code>dmesg | grep -i tty</code> after connecting the serial cable to your PC and router/switch.</p> <ul> <li>Save configuration and exit.</li> </ul> <p>Warning</p> <p><code>minicom</code> uses Ctrl+<code>&lt;key&gt;</code> shortcuts for navigation. Make sure they don't conflict with some of your other terminal shortcuts. E.g. my <code>tmux</code> configuration uses <code>C-a</code> as prefix key, and that conflicts with <code>minicom</code>, so I usually have to use <code>minicom</code> outside of <code>tmux</code>.</p>"},{"location":"guides/how_to_disable_dhcp_proxy_in_dnsmasq_for_pxe/","title":"HowTo disable DHCP proxy in dnsmasq for PXE","text":""},{"location":"guides/how_to_disable_dhcp_proxy_in_dnsmasq_for_pxe/#overview","title":"Overview","text":"<p>Dnsmasq is used as either a DHCP server or DHCP proxy server for PXE metal provisioning.</p> <p>Proxy mode is enabled by default allowing the use of existing DHCP servers on the network. A good description on how DHCP Proxy works can be found on the related FOG project wiki page.</p>"},{"location":"guides/how_to_disable_dhcp_proxy_in_dnsmasq_for_pxe/#disabling-proxy-mode","title":"Disabling Proxy mode","text":"<p>Certain scenarios will require this project to use a DHCP server, such as an air-gap deployment or dedicated VLAN.</p> <p>To disable proxy mode thereby using dnsmasq as a DHCP server, modify <code>metal/roles/pxe_server/defaults/main.yml</code> and set <code>dhcp_proxy</code> to <code>false</code>.</p>"},{"location":"guides/how_to_expose_services_to_world/","title":"HowTo expose services to the world (wide web)","text":"<p>Info</p> <p>This tutorial is for Cloudflare Tunnel users, please skip if you use port forwarding.</p> <p>Apply the <code>./external</code> layer to create a tunnel if you haven't already, then add the following annotations to your <code>Ingress</code> object (replace <code>example.com</code> with your domain):</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    external-dns.alpha.kubernetes.io/target: \"homelab-tunnel.example.com\"\n    external-dns.alpha.kubernetes.io/cloudflare-proxied: \"true\"\n# ...\n</code></pre>"},{"location":"guides/how_to_for_media_management/","title":"HowTo do media management (the right wrong way)","text":"<p>Warning</p> <p>This is for educational purposes only   Use at your own risk and make sure delete the stack as soon as you've finished testing how things work!</p>"},{"location":"guides/how_to_for_media_management/#initial-setup","title":"Initial setup","text":"<ul> <li>Jellyfin <code>https://jellyfin.example.com</code>:<ul> <li>Create an <code>admin</code> user and save the credentials to your password manager</li> <li>Add media libraries:<ul> <li>Movies at <code>/media/movies</code></li> <li>Shows at <code>/media/shows</code></li> </ul> </li> </ul> </li> <li>Radarr <code>https://radarr.example.com</code>:<ul> <li>Authentication method: Forms</li> <li>Create an <code>admin</code> user and save the credentials to your password manager</li> <li>Navigate to Settings -&gt; Download Clients -&gt; Add -&gt; Transmission (you can keep the default address and port)</li> <li>Navigate to Settings -&gt; Media Management -&gt; Add Root Folder <code>/movies</code></li> <li>Navigate to Settings -&gt; General -&gt; API Key -&gt; copy it for the next steps (or save it to your password manager)</li> </ul> </li> <li>Sonarr <code>https://sonarr.example.com</code>: same as Radarr but use <code>/shows</code> for the root folder</li> <li>Prowlarr <code>https://prowlarr.example.com</code>:<ul> <li>Authentication method: Forms</li> <li>Create an <code>admin</code> user and save the credentials to your password manager</li> <li>Navigate to Settings -&gt; Apps -&gt; Add:<ul> <li>Radarr: paste the API key (you can keep the default address and port)</li> <li>Sonarr: same as Radarr</li> </ul> </li> <li>Go back to Indexers -&gt; Add New Indexers</li> </ul> </li> <li>Jellyseerr <code>https://jellyseerr.example.com</code>:<ul> <li>Sign In<ul> <li>Use your Jellyfin account</li> <li>URL: <code>https://jellyfin.example.com</code></li> <li>Email: you can enter anything</li> <li>Username: <code>admin</code></li> <li>Password: same as Jellyfin</li> </ul> </li> <li>Configure Media Server<ul> <li>Enable Movies and Shows</li> </ul> </li> <li>Configure Services:<ul> <li>Add Radarr Server:<ul> <li>Default Server: true</li> <li>Name: Radarr</li> <li>Hostname: localhost</li> <li>Port: use default</li> <li>API Key: from previous step</li> <li>Click Test</li> <li>Quality Profile: choose whatever suits you</li> <li>Root folder: <code>/movies</code></li> <li>External URL: <code>https://radarr.example.com</code></li> <li>Enable Scan: true</li> </ul> </li> <li>Add Sonarr Server: similar to Radarr</li> </ul> </li> </ul> </li> </ul> <p>Optionally, for convenience, you can add a <code>guest</code> account without a password in Jellyfin, allow access to all libraries, and allow that account to manage requests in Jellyseerr.</p>"},{"location":"guides/how_to_for_media_management/#usage","title":"Usage","text":"<p>Here's a suggested flow:</p> <ul> <li>Users using the <code>guest</code> account can request media in Jellyseerr</li> <li>Admins approve the request (or you can enable auto-approve)</li> <li>Wait for the media to be downloaded</li> <li>Watch on Jellyfin</li> </ul> <p>You may need to increase the volume size depending on your usage.</p> <p>Info</p> <p>See also: self-hosting an automated jellyfin media streaming stack</p>"},{"location":"guides/how_to_manage_domain_with_cloudflare/","title":"HowTo manage your domain with cloudflare","text":"<ul> <li> <p>Create a new account at Cloudflare</p> </li> <li> <p>In your account home page, add your existing domain to cloudflare</p> <ul> <li>Leave everything as default and click \"Continue\"</li> </ul> <p></p> </li> <li> <p>Select the Free plan (you can change this later if you want access to some paid features, but for our purposes Free plan is enough)</p> <p></p> </li> <li> <p>Cloudflare will create some default records, review and click \"Continue to activation\"</p> <p></p> </li> <li> <p>Follow the instructions to update your domain nameservers and activate Cloudflare, then click \"Continue\"</p> <ul> <li>NB! Registrars may take up to 24 hours to process nameserver changes.</li> </ul> <p></p> </li> <li> <p>Wait for Cloudflare to finalize the setup</p> <p></p> </li> <li> <p>Profit</p> </li> </ul> <p>Info</p> <p>For more information see the cloudflare full DNS setup guide</p>"},{"location":"guides/how_to_onboard_users/","title":"HowTo onboard users","text":"For userFor admin <p>Run the following script:</p> <pre><code>./scripts/onboard-user.sh johndoe \"John Doe\" \"johndoe@example.com\"\n</code></pre> <p>Let the user scan the QR code or follow the link to set up passkeys or password + TOTP.</p>"},{"location":"guides/how_to_onboard_users/#create-user","title":"Create user","text":"<p>Ask an admin to create your account, provide the following information:</p> <ul> <li>Full name (John Doe)</li> <li>Select a username (<code>johndoe</code>)</li> <li>Email address (<code>johndoe@example.com</code>)</li> </ul>"},{"location":"guides/how_to_onboard_users/#install-companion-apps","title":"Install companion apps","text":"<p>For all users:</p> <ul> <li>A password manager (I personally recommend KeePassXC)</li> <li>A Matrix chat client (optional, you can use the web version)</li> </ul> <p>For technical users:</p> <ul> <li>Docker</li> <li>Nix and direnv (optional, but highly recommended)</li> <li>Lens (optional, you can use the included <code>kubectl</code> or <code>k9s</code> command in the tools container)</li> </ul>"},{"location":"guides/how_to_run_cluster_with_a_single_node/","title":"HowTo run the cluster on a single node","text":"<p>Danger</p> <p>This is not officially supported and I don't regularly test it, I highly recommend using multiple nodes.</p> <p>Using a single node could lead to data loss unless your backup strategy is rock solid, make sure you are ABSOLUTELY CERTAIN this is what you want.</p> <p>Update the following changes, then commit and push.</p>"},{"location":"guides/how_to_run_cluster_with_a_single_node/#remove-storage-redundancy","title":"Remove storage redundancy","text":"<p>Set pod counts and number of data copies to <code>1</code>:</p> system/rook-ceph/values.yaml<pre><code>rook-ceph-cluster:\n  cephClusterSpec:\n    mon:\n      count: 1\n    mgr:\n      count: 1\n  cephBlockPools:\n    - name: standard-rwo\n      spec:\n        replicated:\n          size: 1\n          requireSafeReplicaSize: false\n  cephFileSystems:\n    - name: standard-rwx\n      spec:\n        metadataPool:\n          replicated:\n            size: 1\n        dataPools:\n          - name: data0\n            replicated:\n              size: 1\n        metadataServer:\n          activeCount: 1\n          activeStandby: false\n</code></pre>"},{"location":"guides/how_to_run_cluster_with_a_single_node/#disable-automatic-upgrade","title":"Disable automatic upgrade","text":"<p>Because they will try to drain the only node, the pods will have no place to go. Remove them entirely:</p> <pre><code>rm -rf system/kured\n</code></pre> <p>Commit and push the change. You can revert it later when you add more nodes.</p>"},{"location":"guides/how_to_run_commands_on_multiple_nodes/","title":"HowTo run commands on multiple nodes","text":""},{"location":"guides/how_to_run_commands_on_multiple_nodes/#ansible-console","title":"Ansible Console","text":"<p>Use ansible-console:</p> <pre><code>make console\n</code></pre> <p>Then enter the command(s) you want to run.</p> <p>Example</p> <p><code>root@all (4)[f:5]$ uptime</code> <pre><code>metal0 | CHANGED | rc=0 &gt;&gt;\n 10:52:02 up 2 min,  1 user,  load average: 0.17, 0.15, 0.06\nmetal1 | CHANGED | rc=0 &gt;&gt;\n 10:52:02 up 2 min,  1 user,  load average: 0.14, 0.11, 0.04\nmetal3 | CHANGED | rc=0 &gt;&gt;\n 10:52:02 up 2 min,  1 user,  load average: 0.03, 0.02, 0.00\nmetal2 | CHANGED | rc=0 &gt;&gt;\n 10:52:02 up 2 min,  1 user,  load average: 0.06, 0.06, 0.02\n</code></pre></p>"},{"location":"guides/how_to_run_commands_on_multiple_nodes/#ssh","title":"SSH","text":"<p>You can run commands on nodes using <code>ssh</code>. To execute a command on all hosts, use <code>run</code> make target with <code>CMD</code> input:</p> <p>Example</p> <pre><code>make run CMD='hostname'\n\ndraupnir\ndone hostname on draupnir\nfreyja\ndone hostname on freyja\nheimdall\ndone hostname on heimdall\nmegingjord\ndone hostname on megingjord\nodin\ndone hostname on odin\n</code></pre>"},{"location":"guides/how_to_update_dependencies/","title":"HowTo update dependencies","text":""},{"location":"guides/how_to_update_dependencies/#metal","title":"Metal","text":"<p>Tip</p> <p>When updating dependencies - for example ansible version, ansible collections versions, and so on - first apply the changes to a single node with: <code>make -C metal main ANSIBLE_TARGETS=localhost,draupnir</code>.  This reduces the risk of messing everything up (worst case you will mess up one node and can re-provision it) and makes it easier to test version updates in isolation.  When you're happy with the changes and have verified that everything works as expected on the targeted node, you can apply changes to all nodes with: <code>make metal</code>.</p>"},{"location":"guides/how_to_update_dependencies/#system","title":"System","text":"<p>tbd</p>"},{"location":"guides/how_to_update_dependencies/#external","title":"External","text":"<p>tbd</p>"},{"location":"guides/how_to_update_dependencies/#appsplatform","title":"Apps/Platform","text":"<p>tbd</p>"},{"location":"guides/how_to_update_documentation/","title":"HowTo update documentation","text":"<p>This project uses the Di\u00e1taxis technical documentation framework. The website is generated using Material for MkDocs and can be viewed at homelab.khuedoan.com.</p> <p>There are 4 main parts:</p> <ul> <li>Getting started (tutorials): learning-oriented</li> <li>Concepts (explanation): understanding-oriented</li> <li>How-to guides: goal-oriented</li> <li>Reference: information-oriented</li> </ul>"},{"location":"guides/how_to_update_documentation/#local-development","title":"Local development","text":"<p>To edit and view locally, run:</p> <pre><code>make docs\n</code></pre> <p>Then visit localhost:8000</p>"},{"location":"guides/how_to_update_documentation/#deployment","title":"Deployment","text":"<p>It's running on my other cluster in the khuedoan/horus project (so if the homelab goes down everyone can still read the documentation).</p>"},{"location":"guides/how_to_update_firmware/","title":"HowTo update device firmware","text":"<p>On each node, run <code>fwupdmgr refresh</code> to update the firmware metadata, then <code>fwupdmgr update</code> to check for and apply available firmware updates:</p> <pre><code>[root@megingjord ~]# fwupdmgr refresh\n</code></pre> <pre><code>WARNING: UEFI capsule updates not available or enabled in firmware setup\nSee https://github.com/fwupd/fwupd/wiki/PluginFlag:capsules-unsupported for more information.\nUpdating lvfs\nDownloading\u2026             [************************************** ]\nSuccessfully downloaded new metadata: 2 local devices supported\n</code></pre> <pre><code>[root@megingjord ~]# fwupdmgr update\n</code></pre> <pre><code>WARNING: UEFI capsule updates not available or enabled in firmware setup\nSee https://github.com/fwupd/fwupd/wiki/PluginFlag:capsules-unsupported for more information.\n\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551 Upgrade XXXXXXNV256G LA KIOXIA from 1104ANLA to 1109ANLA?                    \u2551\n\u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n\u2551 [Support devices and Firmware version] XXXXXXNV256G 1109ANLA, XXXXXXNT256G   \u2551\n\u2551 1109ANLA, XXXXXXNV512G 1109ANLA, XXXXXXNT512G 1109ANLA, XXXXXXNV1T02         \u2551\n\u2551 1109ANLA, XXXXXXNT1T02 1109ANLA                                              \u2551\n\u2551                                                                              \u2551\n\u2551 [Problem Fixes] 1.To fix firmware issue of TCG Opal on reset function./2.To  \u2551\n\u2551 fix the firmware issues that SSD hang up due to conflict system operation    \u2551\n\u2551 with SSD.                                                                    \u2551\n\u2551                                                                              \u2551\n\u2551 [Support Product Scope] Lenovo ThinkPad, ThinkCentre, ThinkStation,          \u2551\n\u2551 IdeaCentre                                                                   \u2551\n\u2551                                                                              \u2551\n\u2551 11MY002VMX must remain plugged into a power source for the duration of the   \u2551\n\u2551 update to avoid damage.                                                      \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\nPerform operation? [Y|n]: y\nDownloading\u2026                  [*                                      ] \nLess than one minuteWaiting\u2026  [***************************************]\nSuccessfully installed firmware\n\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551 Upgrade UEFI dbx from 83 to 20241101?                                        \u2551\n\u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n\u2551 This updates the list of forbidden signatures (the \"dbx\") to the latest      \u2551\n\u2551 release from Microsoft.                                                      \u2551\n\u2551                                                                              \u2551\n\u2551 An insecure version of Howyar's SysReturn software was added, due to a       \u2551\n\u2551 security vulnerability that allowed an attacker to bypass UEFI Secure Boot.  \u2551\n\u2551                                                                              \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\nPerform operation? [Y|n]: y\nUpdating UEFI dbx\u2026       [ -                                     ]\nWaiting\u2026                 [***************************************]\nSuccessfully installed firmware\nAn update requires a reboot to complete. Restart now? [y|N]: y\n</code></pre> <p>Info</p> <p>See also How to update device firmware using fwupd on RHEL system?</p>"},{"location":"guides/how_to_use_both_github_and_gitea/","title":"HowTo use both github and gitea","text":"<p>Even though we self-host Gitea, you may still want to use GitHub as a backup and for discovery.</p>"},{"location":"guides/how_to_use_both_github_and_gitea/#pushing-to-both-remotes-with-a-single-command","title":"Pushing to both remotes with a single command","text":"<p>Add both push URLs (NB! replace my repositories with yours):</p> <pre><code>git remote set-url --add --push origin git@git.0xbad.cloud:ops/homelab\ngit remote set-url --add --push origin git@github.com:serpro69/ktchn8s\n\ngit remote --v\n# origin  git@github.com:serpro69/ktchn8s.git (fetch)\n# origin  git@git.0xbad.cloud:ops/homelab.git (push)\n# origin  git@github.com:serpro69/ktchn8s.git (push)\n</code></pre> <p>Now you can just run <code>git push</code> like usual and it will push to both GitHub and Gitea.</p>"},{"location":"guides/how_to_use_both_github_and_gitea/#pushing-to-a-specific-remote","title":"Pushing to a specific remote","text":"<p>At this moment I prefer this option for more control and flexibility, even though technically I need to run <code>git push</code> twice to update both repos.</p> <p>Add a new <code>gitea</code> remote:</p> <pre><code>git remote add gitea git@git.0xbad.cloud:ops/homelab.git\n\ngit remote --v\n# gitea   git@git.0xbad.cloud:ops/homelab.git (fetch)\n# gitea   git@git.0xbad.cloud:ops/homelab.git (push)\n# origin  git@github.com:serpro69/ktchn8s.git (fetch)\n# origin  git@github.com:serpro69/ktchn8s.git (push)\n</code></pre> <p>Now when you run <code>git push</code>, it will push to github (<code>origin</code> remote).  To push to <code>gitea</code> add the new remote name to the push command: <code>git push gitea</code>.</p>"},{"location":"guides/troubleshooting_pxe_boot/","title":"Troubleshooting PXE Boot","text":""},{"location":"guides/troubleshooting_pxe_boot/#pxe-server-logs","title":"PXE server logs","text":"<p>To view PXE server (includes DHCP, TFTP and HTTP server) logs:</p> <pre><code>./scripts/pxe-logs.sh\n</code></pre> <p>Tip</p> <p>You can view the logs of one or more containers selectively, for example: <pre><code>./scripts/pxe-logs dnsmasq\n./scripts/pxe-logs http\n</code></pre></p>"},{"location":"guides/troubleshooting_pxe_boot/#nodes-not-booting-from-the-network","title":"Nodes not booting from the network","text":"<p>First things to try:</p> <ul> <li>Remove the generated pxe boot files: <code>rm -rf metal &amp;&amp; git checkout metal</code>; then re-run the ansible playbook</li> <li>Connect a monitor and a keyboard to one of the nodes and run <code>bootstrap</code> playbook targeting only that node: <code>cd metal &amp;&amp; make bootstrap ANSIBLE_TARGETS=localhost,megingjord</code><ul> <li>Troubleshooting one node at a time is easier</li> </ul> </li> <li>Check if the controller (PXE server) is on the same subnet with bare metal nodes (sometimes Wifi will not work or conflict with wired Ethernet, try to turn it off)<ul> <li>This should usually be handled by the playbooks, but still good to check</li> </ul> </li> <li>Check if bare metal nodes are configured to boot from the network</li> <li>Check if Wake-on-LAN is enabled</li> <li>Check if the operating system ISO file is mounted</li> <li>Check the controller's firewall config to make sure that the following ports are open:<ul> <li>DHCP (67/68)</li> <li>TFTP (69)</li> <li>HTTP (80)</li> </ul> </li> <li>Check PXE server Docker logs</li> <li>Check if the servers are booting to the correct OS (Fedora Server installer instead of the previously installed OS)<ul> <li>If not, try to select it manually or remove the previous OS boot entry</li> </ul> </li> <li>Examine the network boot process with Wireshark or Termshark</li> </ul>"},{"location":"guides/troubleshooting_pxe_boot/#nodes-not-booting-after-os-installation","title":"Nodes not booting after OS installation","text":"<ul> <li>Check if the node gets stuck in GRUB after OS has been installed<ul> <li>Some systems expect a connected keyboard or screen (or both) for GRUB to start the countdown before automatically selecting the first entry.<ul> <li>A few of my machines (Lenovo M70q gen.2 particularly) refuse to go beyond GRUB w/o a connected keyboard</li> <li>Because of this, I have modified GRUB to disable countdown and hide the screen</li> <li>NB! If you need to access GRUB, try holding Shift key during boot (See also Grub menu at boot time... \"holding shift\" not working for troubleshooting.)</li> </ul> </li> </ul> </li> </ul>"},{"location":"guides/troubleshooting_renovate/","title":"Troubleshooting Renovate","text":""},{"location":"guides/troubleshooting_renovate/#renovate-pods-failing-with-authentication-failure-error","title":"Renovate pods failing with \"Authentication failure\" error","text":"<p>I've had this strange issue when I just setup the cluster, and I could not find the root-cause, but after configuring renovate, which created an initial \"Configure Renovate\" PR, no more PRs were made from renovate.</p> <p>Looking at the pods logs, I could only see this:</p> <pre><code>FATAL: Authentication failure\n  INFO: Renovate is exiting with a non-zero code due to the following logged errors\n    \"loggerErrors\": [\n      {\n        \"name\": \"renovate\",\n        \"level\": 60,\n        \"logContext\": \"tgi_4XBKjKBu6X7dkrQZ_\",\n        \"msg\": \"Authentication failure\"\n      }\n    ]\n</code></pre> <p>Pod events were empty, which hinted at a very early failure in the pod startup.</p> <p>First thing I cheched was for the renovate token to be present in <code>global-secrets</code> namespace, as well as in <code>gitea_admin</code> user profile (via gitea UI).</p> <p>I also checked that the <code>gitea.renovate</code> secret in <code>global-secrets</code> namespace matched <code>renovate-secret</code> in <code>renovate</code> namespace:</p> <pre><code>kubectl -n global-secrets get secrets gitea.renovate -o jsonpath='{.data.token}' | base64 -d\n\nkubectl -n renovate get secrets renovate-secret -o jsonpath='{.data.RENOVATE_TOKEN}' | base64 -d\n</code></pre> <p>I then re-ran post-install script (which was probably redundant since all the secrets were already in place) and decided to try to trigger the job manually, instead of waiting until next morning, with:</p> <pre><code>kubectl -n renovate create job --from=CronJob/renovate manual-renovate-run-$(date +%s)\n</code></pre> <p>The job completed successfully, and I could see the PRs being created.</p> <p>I'm still baffled by the root-case of this issue, and I don't know why running a manual job fixed it. However, I do there might have been some race conditions that caused the pods to fail. I've also pused this commit which should improve the <code>renovate -&gt; gitea</code> interaction a bit and hopefully would fix this problem on a newly-created clusters as well.</p>"},{"location":"guides/troubleshooting_rook_ceph/","title":"Troubleshooting Rook-Ceph","text":""},{"location":"guides/troubleshooting_rook_ceph/#osd-zapping","title":"OSD pods are not created after zapping devices","text":"<p>Warning</p> <p>You may sometimes encounter issues with OSD nodes missing when you re-provision an existing node because zapping didn't fully remove the ceph metadata. My current cleanup version seems to do the trick most of the times, but sometimes I still see issues with <code>rook-ceph-osd-prepare</code> reporting that no partitions were found and that the older partition (i.e. <code>/dev/nvme0n1p3</code>) belongs to another cluster. This seems to happen even more often when I try to re-create the entire cluster from scratch.  In such cases, I boot the machine from an Ubuntu live-USB, and wipe-&gt;create-&gt;wipe the partitions on the disk manually several times via gparted.  Any PRs to make zapping existing partitions more robust are very much welcome!</p> <p>I had to do some manual steps to create OSD on the new node after zapping the disk and once the node was re-provisioned and joined the cluster again. Particularly, I had to restart the <code>rook-ceph-operator</code>.</p> <p>Looking at the OSD pods with:</p> <pre><code>kubectl -n rook-ceph get pod -l app=rook-ceph-osd\n</code></pre> <p>showed only 4 nodes, even after a few hours of re-provisioning the node</p> <pre><code>NAME                               READY   STATUS    RESTARTS   AGE\nrook-ceph-osd-0-5554f4f4bc-rrpj6   1/1     Running   0          3h25m\nrook-ceph-osd-1-5bdcf57db5-ccwnf   1/1     Running   0          3h25m\nrook-ceph-osd-3-7d9f568c86-hjj5m   1/1     Running   0          3h18m\nrook-ceph-osd-4-5994f5bf78-kvvlh   1/1     Running   0          3h24m\n</code></pre> <p>And prepare pod for <code>draupnir</code> didn't start on its own after re-provisioning the node:</p> <pre><code>kubectl -n rook-ceph get pod -l app=rook-ceph-osd-prepare\n</code></pre> <pre><code>NAME                                     READY   STATUS      RESTARTS   AGE\nrook-ceph-osd-prepare-freyja-5x2jp       0/1     Completed   0          3h25m\nrook-ceph-osd-prepare-heimdall-qt596     0/1     Completed   0          3h25m\nrook-ceph-osd-prepare-megingjord-24cm7   0/1     Completed   0          3h18m\nrook-ceph-osd-prepare-odin-v5kwm         0/1     Completed   0          3h24m\n</code></pre> <p>So I had to dig into troubleshooting guides and eventually found something that seemed to work based on this solution:</p> <p>After the settings are updated or the devices are cleaned, trigger the operator to analyze the devices again by restarting the operator. Each time the operator starts, it will ensure all the desired devices are configured. The operator does automatically deploy OSDs in most scenarios, but an operator restart will cover any scenarios that the operator doesn't detect automatically.</p> <pre><code># Delete the operator to ensure devices are configured. \n# A new pod will automatically be started when the current operator pod is deleted.\n$ kubectl -n rook-ceph delete pod -l app=rook-ceph-operator\n</code></pre> <p>Then checking the pods after the operator restarted:</p> <pre><code>kubectl -n rook-ceph get pod -l app=rook-ceph-osd\n\n#NAME                               READY   STATUS    RESTARTS   AGE\n#rook-ceph-osd-0-5554f4f4bc-rrpj6   1/1     Running   0          3h25m\n#rook-ceph-osd-1-5bdcf57db5-ccwnf   1/1     Running   0          3h25m\n#rook-ceph-osd-3-7d9f568c86-hjj5m   1/1     Running   0          3h18m\n#rook-ceph-osd-4-5994f5bf78-kvvlh   1/1     Running   0          3h24m\n#rook-ceph-osd-5-798fd5f45c-xjzz2   1/1     Running   0          6m18s\n\nkubectl -n rook-ceph get pod -l app=rook-ceph-osd-prepare\n\n#NAME                                     READY   STATUS      RESTARTS   AGE\n#rook-ceph-osd-prepare-draupnir-gqz9p     0/1     Completed   0          9m25s\n#rook-ceph-osd-prepare-freyja-5x2jp       0/1     Completed   0          9m21s\n#rook-ceph-osd-prepare-heimdall-qt596     0/1     Completed   0          9m18s\n#rook-ceph-osd-prepare-megingjord-24cm7   0/1     Completed   0          9m15s\n#rook-ceph-osd-prepare-odin-v5kwm         0/1     Completed   0          9m12s\n</code></pre> <p>Tip</p> <p>Useful documentation related to above: - Ceph Teardown - Zapping Devices - Ceph Common Issues</p>"},{"location":"info/","title":"About","text":"<p>This is my homelab. There are many like it, but this one is mine.</p> <p>What is a homelab?</p> <p>Homelab is the name given to a server (or multi-server) setup that resides locally in your home and where you host several applications, virtualized systems, containerized applications and so on, either for testing and developing, or for home and functional usage. The hardware you use can be anything from an old laptop, a simple tower or mini-PC, to a RaspberryPi-like device, to a repurposed professional server that you can acquire from companies who discard them due to their age but are still usable, a combination of all of these, or anything in between.</p> <p>See the r/homelab introduction for more information.</p>"},{"location":"info/#history","title":"History","text":"<p>One of the biggest drivers behind this project was to get a much deeper familiarity with Kubernetes. I could play around with something like minikube on my laptop all day long, but I wanted something that would require me to treat it as production (or at least production-like) to get more hands on feel, break things, get frustrated (get others frustrated?), then fix them, rinse and repeat. That's pretty much how I like to learn.</p> <p>I also got my hands on a few old cisco devices and used this opportunity to get more hands-on with networking, which is another area I wanted to improve my skills in. Eventually I want to have a homelab that would be fully-operational and ready for production workloads, so I could use it for my personal projects, as well as for testing and experimenting with new technologies.</p> <p>I have a lot of experience with Ansible and Terraform, and I spent some time looking into how to provision the nodes. Most solutions were pretty heavy and cumbersome, to say the least. I eventually found Khue's homelab repo which just spins up a container to handle PXE booting the machines and then uses ansible for the rest. This immediately drew my attention as it was one of the pain-points I really wanted to automate. I also liked how his code was laid out and how the provisioning flow was structured - you provision baremetal machines, install k3s, and create ArgoCD resources, and then the latter is responsible for deploying everything else - so I used it as a base for my own homelab cluster. I wanted to make my cluster fully-operational first - working in small increments along the way - and modify it heavily afterwards. Forking his repo would require a lot of cleanups and unnecessary work, that's why my repo is technically not a \"fork\", although a lot of ideas and initial code was borrowed from his repo, for which he gets all the credits.</p>"},{"location":"info/#ack","title":"Ack","text":"<p>I've used a lot of resources on the internet while researching and learning on how to build my homelab. The following references, among other things, are of particular noteworthiness:</p> <ul> <li>Project TinyMiniMicro on servethehome.com</li> <li>Many examples from khuedoan/homelab<ul> <li>Ephemeral PXE server inspired by Minimal First Machine in the DC<ul> <li>pdf version</li> </ul> </li> <li>ArgoCD usage and monitoring configuration in locmai/humble</li> <li>README template</li> <li>Run the same Cloudflare Tunnel across many <code>cloudflared</code> processes<ul> <li>markdown version</li> </ul> </li> <li>MAC address environment variable in GRUB config</li> <li>Official k3s systemd service file</li> <li>Official Cloudflare Tunnel examples</li> <li>Initialize GitOps repository on Gitea and integrate with Tekton by RedHat</li> <li>SSO configuration from xUnholy/k8s-gitops</li> <li>Di\u00e1taxis technical documentation framework</li> <li>Official Terratest examples</li> <li>Self-host an automated Jellyfin media streaming stack<ul> <li>markdown version</li> </ul> </li> <li>App Template Helm chart by bjw-s-labs</li> </ul> </li> <li>App configs from onedr0p/home-ops<ul> <li>and the cluster-template</li> </ul> </li> </ul>"},{"location":"info/changelog/","title":"Changelog","text":""},{"location":"info/changelog/#010-unreleased","title":"0.1.0 - UNRELEASED","text":""},{"location":"info/contributing/","title":"Contributing","text":"<p>So, you've made it this far \ud83e\udd13 Congrats! \ud83c\udf89 I've primarily made this to document my own steps, but, having learned most of what I know today about software (and hardware) from open-source, I'm happy if you've found any of this code useful as well. If you want to contribute anything: fixes to code, configurations, documentation; like, literally, anything - you should definitely do so.</p> <p>Steps:</p> <ul> <li>Open a new issue \ud83c\udd95<ul> <li>Totally optional. I'll accept PR's w/o an associated open issue, so long as it's clear what the code change is all about.</li> </ul> </li> <li>Fork this repository \ud83c\udf74</li> <li>Install dependencies (I guess you already have nix shell installed? \ud83e\udd28)</li> <li>Bang your head against the keyboard from frustration \ud83d\ude21\ud83d\ude24\ud83e\udd2c (Who said coding was easy?)</li> <li>Open a pull request once you're finished \ud83d\ude35\u200d\ud83d\udcab</li> <li>Profit \ud83e\udd11</li> </ul>"},{"location":"info/license/","title":"License","text":"<p>MIT License</p> <p>Copyright \u00a9 2025 - present serpro69</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"info/roadmap/","title":"Roadmap","text":"<p>Info</p> <p>Current status: ALPHA  See also ToDo and open issues for a list of immediate tasks</p>"},{"location":"info/roadmap/#alpha-requirements","title":"Alpha requirements","text":"<p>Anything that works (...or doesn't \ud83e\udd37).</p>"},{"location":"info/roadmap/#beta-requirements","title":"Beta requirements","text":"<p>Good enough for tinkering and personal usage, and reasonably secure.</p> <ul> <li> Change OS To Ubuntu<ul> <li>Personal preference over fedora</li> <li>NB! only if I find a way to automate OS provisioning</li> <li>Existing bits that need to be changed:<ul> <li> pxe - netboot.xyz?</li> <li> cloud-init - subiquity autoinstall</li> <li> <code>dnf</code> -&gt; <code>apt</code></li> <li> <code>sysctl</code></li> <li> dnf automatic -&gt; ?</li> <li> kured (<code>rebootSentinelCommand</code>)</li> </ul> </li> </ul> </li> <li> Automated bare metal provisioning<ul> <li> Controller set up (Docker)</li> <li> OS installation (PXE boot)</li> <li> Disk wipe (OS re-installation)</li> </ul> </li> <li> Automated cluster creation (k3s)</li> <li> Automated application deployment (ArgoCD)</li> <li> Automated DNS management</li> <li> Initialize GitOps repository on Gitea automatically</li> <li> Observability<ul> <li> Monitoring</li> <li> Logging</li> <li> Alerting</li> </ul> </li> <li> SSO</li> <li> Reasonably secure<ul> <li> Automated certificate management</li> <li> Declarative secret management</li> <li> Replace all default passwords with randomly generated ones</li> <li> Expose services to the internet securely with Cloudflare Tunnel</li> </ul> </li> <li> Only use open-source technologies (except external managed services in <code>./external</code>)</li> <li> Everything is defined as code</li> <li> Backup solution (3 copies, 2 seperate devices, 1 offsite)</li> <li> Define SLOs:<ul> <li> 70% availability (might break in the weekend due to new experimentation)</li> </ul> </li> <li> Core applications<ul> <li> Gitea</li> <li> Woodpecker</li> <li> Private container registry</li> <li> Homepage</li> </ul> </li> </ul>"},{"location":"info/roadmap/#stable-requirements","title":"Stable requirements","text":"<p>Can be used in \"production\" (for family or even small scale businesses).</p> <ul> <li>  A single command to deploy everything</li> <li> Fast deployment time (from empty hard drive to running services in under 1 hour)</li> <li> Fully automatic, not just automated<ul> <li> Bare-metal OS rolling upgrade</li> <li> Kubernetes version rolling upgrade</li> <li> Application version upgrade</li> <li> Encrypted backups</li> <li> Secrets rotation</li> <li> Self healing</li> </ul> </li> <li> Secure by default<ul> <li> SELinux</li> <li> Network policies</li> </ul> </li> <li> Static code analysis</li> <li> Chaos testing</li> <li> Minimal dependency on external services</li> <li> Complete documentation<ul> <li> Diagram as code</li> <li> Book (this book)</li> <li> Walkthrough tutorial and feature demo (video)</li> </ul> </li> <li> Configuration script for new users</li> <li> More dashboards and alert rules</li> <li> SLOs:<ul> <li> 99,9% availability (less than 9 hours of downtime per year)</li> <li> 99,99% data durability</li> </ul> </li> <li> Clear upgrade path</li> <li> Additional applications<ul> <li> Matrix with bridges</li> <li> VPN server</li> <li> PeerTube</li> <li> Blog</li> <li> Development Dashboard</li> </ul> </li> </ul>"},{"location":"info/todo/","title":"ToDo","text":"<ul> <li> <p> Apps/Services</p> <ul> <li> NextCloud</li> <li> (wip) <code>*arr</code> suite (Radarr, Sonarr, Readarr, Lidarr, Bazaar, Prowlarr, Profilarr)<ul> <li>rreading-glasses as metadata service</li> </ul> </li> <li> Media streaming via Jellyfin / Jellyseer (shared with fam)</li> <li>Vaultwarden </li> <li>Mealie</li> <li>Ebook/Audiobook manager via Kavita + Audiobookshelf<ul> <li>Also evaluate Calibre vs Kavita</li> </ul> </li> <li>Actual for budget management</li> <li>StirlingPDF for PDF tools</li> <li>Syncthing to sync some files between devices<ul> <li>Extremely useful if you own a PocketBook e-reader, which runs basically linux, so you can run Syncthing on it, meaning you... get... to... sync... your... eBooks... directly! \ud83e\udd2f\ud83d\ude32\ud83d\ude31</li> </ul> </li> <li>Whatever else I have starred in 'Self-Hosted' category on github that might be useful for home-use or to play around with<ul> <li>... TBC</li> </ul> </li> </ul> </li> <li> <p> Improve docs and add configuration script for new users</p> <ul> <li>Ansible inventory config for metal provisioning<ul> <li>Prompt user to edit the inventory file</li> <li>Update docs - add sample inventory file contents for reference</li> </ul> </li> <li>Search-and-replace throughut the repo files:<ul> <li>Domain name</li> <li>Github repository name</li> <li>... ?</li> </ul> </li> </ul> </li> <li> <p> Automate personal gitea user provisioning</p> </li> <li> <p> Add flaresolverr to media management stack</p> </li> <li> <p> Stream/export sensor data from baremetal and visualize it in grafana</p> <ul> <li>some potentially-useful resources to explore:<ul> <li>https://grafana.com/blog/2019/11/06/how-to-stream-sensor-data-with-grafana-and-influxdb/</li> <li>https://grafana.com/blog/2021/08/12/streaming-real-time-sensor-data-to-grafana-using-mqtt-and-grafana-live/</li> <li>https://grafana.com/blog/2024/01/03/how-to-create-alert-rules-to-monitor-sensor-data-with-grafana-and-raspberry-pi/</li> <li>https://github.com/sbnb-io/sbnb/blob/main/README-GRAFANA.md<ul> <li>https://www.reddit.com/r/homelab/comments/1iuvbxp/fastest_way_to_start_bare_metal_server_from_zero/</li> </ul> </li> <li>https://grafana.com/grafana/dashboards/237-sensors/</li> <li>https://github.com/ncabatoff/sensor-exporter</li> </ul> </li> </ul> </li> <li> <p> Automate firmware updates</p> </li> <li> <p> Test zapping devices and make sure it works fine. Current version was tested on <code>draupnir</code>, which seemed to wipe the disk fine, but I had to do some manual steps afterwards to create OSD on the new node once the node was re-provisioned and joined the cluster again.</p> </li> <li> <p> Install ARA to record ansible executions</p> </li> <li> <p> Try rke2 which includes by default Cilium and nginx-ingress + etcd db</p> <ul> <li>ref: https://github.com/khuedoan/homelab/issues/179#issue-2875515756</li> </ul> </li> <li> <p> Replace kickstart with cloud-init</p> <ul> <li>Kickstart is gonna end (?) and cloud-init is much more agnostic; also it can trigger ansible pull</li> <li>Cloud-init can also be used across muppet OSes, not just Fedora, as is the case with kickstart</li> <li>ref: https://github.com/khuedoan/homelab/issues/179#issue-2875515756</li> </ul> </li> <li> <p> Improve github+gitea workflow</p> <ul> <li>One of the downsides is that I need to delete non-master (PR) branches on gitea manually (well, via cli, but still)</li> <li>Maybe use a separate branch for gitea? E.g. <code>main</code>?</li> <li>Or maybe use a separate remote for gitea (or for github? since gitea is technically considered \"the origin\"?) E.g. <code>gitea</code> (or <code>github</code>, for github repo origin)?</li> </ul> </li> <li> <p> Encrypt kubeconfig with sops so it can be committed to git</p> </li> <li> <p> Update architecture/overview components</p> <ul> <li>Basic diagram of code components and their relations</li> <li>Description of components and their purpose</li> </ul> </li> <li> <p> Update concepts/pxe_boot with a visual \"in-action\" showcase of how it works, once it's in place</p> </li> <li> <p> Add up-to-date config files of C1111 and C3560 for reference</p> <ul> <li>Can be placed in a separate note (probably don't even need to make it visible in nav menu) and referenced from installation/production/network</li> </ul> </li> <li> <p> Check that devices on Guest WiFi network (when Eero is in AP/Bridge mode!) are still isolated and cannot see or communicate with each other or the main network.</p> <ul> <li>Eero in Bridge mode looses a lot of security related functionality (it becomes \"greyed out\" in the app also.) However, it seems that the guest network can still be enabled from the app. Hopefully that guest network is still isolated, but needs double-checking.</li> <li>Some related links:<ul> <li>https://www.reddit.com/r/eero/comments/g0mjqi/guest_network_and_general_routing_questions/</li> </ul> </li> </ul> </li> <li> <p> When storing terraform state locally one needs to think about where/how to back it up. An alternative would be to use terraform cloud or opentofu TACOS, which are paid services (Plus your state is stored on someone else's computer, and hence should be encrypted)</p> <ul> <li>What can be alternatives to storing the state locally?<ul> <li>Initial provisioning can be done with local state<ul> <li>Once the cluster is up and running, we can host Atlantis and migrate the state to it.</li> <li>As an added benefit, this makes it possible to run terraform from PRs</li> </ul> </li> <li>Store/commit sops-encrypted state. Run <code>terraform</code> with a script/make wrapper that decrypts the state before running <code>terraform</code> commands, and re-encrypts it at the end.</li> </ul> </li> </ul> </li> <li> <p> Configure <code>/etc/hosts</code> on local controller machine as part of <code>metal</code> provisioning     <pre><code># midgard.local homelab\n# network devices\n10.10.10.1      muspell\n10.10.10.2      bifrost\n# k8s cluster\n10.10.10.10     odin\n10.10.10.11     freyja\n10.10.10.12     heimdall\n10.10.10.20     mjolinr\n10.10.10.21     gungnir\n10.10.10.22     draupnir\n10.10.10.23     megingjord\n10.10.10.24     hofund\n10.10.10.25     gjallarhorn\n10.10.10.26     brisingamen\n# storage devices\n10.10.10.30     yggdrasil\n</code></pre></p> </li> <li> <p> Configure <code>~/.ssh/config</code> on local controller machine as part of <code>metal</code> provisioning     <pre><code>Host 10.10.10.*\n  StrictHostKeyChecking no\n  LogLevel ERROR\n  UserKnownHostsFile /dev/null\n\n# muspell (C1111 router) in homelab vlan\nHost 10.10.10.1 muspell\n  User cisco\n  PasswordAuthentication yes\n\n# bifrost (C3560 switch) in homelab vlan\nHost 10.10.10.2 bifrost\n  User cisco\n  PasswordAuthentication yes\n  KexAlgorithms +diffie-hellman-group14-sha1\n  HostKeyAlgorithms +ssh-rsa\n\n# k8s cluster nodes in homelab vlan\nHost 10.10.10.1* 10.10.10.2* odin freyja heimdall mjolnir draupnir gungnir megingjord hofund brisingamen gjallarhorn\n  User root\n  IdentityFile ~/.ssh/homelab_id_ed25519\n  StrictHostKeyChecking no\n  LogLevel ERROR\n  UserKnownHostsFile /dev/null\n  GSSAPIAuthentication no # not supported on OS I use today for servers\n\n# storage nodes in homelab vlan\nHost 10.10.10.3* yggdrasil\n  User root\n  IdentityFile ~/.ssh/homelab_id_ed25519\n  StrictHostKeyChecking no\n  LogLevel ERROR\n  UserKnownHostsFile /dev/null\n</code></pre></p> </li> <li> <p> Check if server is up before sending WoL magic packets</p> </li> <li> <p> Ask before proceeding when running <code>make bootstrap</code> in <code>metal</code> provisioning</p> <ul> <li>The server prefers to boot from Network when woken up, which will erase all data on the disk and re-install the OS</li> <li>Ask the user for confirmation before proceeding.<ul> <li>Mention <code>make wake</code> alternative which can be used just to wake up the machines</li> </ul> </li> </ul> </li> <li> <p> Consider restricting ssh access from homelab to router/switch SVI to specific IPs</p> <ul> <li>Stage 4 : C1111 Configuration</li> </ul> <p><pre><code>! --- Define ACL for traffic FROM Homelab Network ---\nip access-list extended ACL_FROM_HOMELAB_NETWORK\n ! ...\n ! (Optional: Add permits if Homelab needs to SSH to router's Homelab SVI - local management when e.g. laptop is physically connected to homelab network)\n 103 remark Permit SSH from Homelab to router's Homelab SVI (local management)\n 103 permit tcp 10.10.10.0 0.0.0.255 host 10.10.10.1 eq 22\n 104 remark Permit SSH from Homelab to switch's Homelab SVI (local management)\n 104 permit tcp 10.10.10.0 0.0.0.255 host 10.10.10.2 eq 22\n 199 remark --- END ---\n ! ...\nexit\n</code></pre> - [ ] Limit permits to specific IP addresses instead of using <code>10.10.10.0</code> so that e.g. k8s servers couldn't ssh to Homelab's router or switch</p> </li> <li> <p> Provision cisco devices with Ansible</p> <ul> <li>cisco.ios collection</li> </ul> </li> <li> <p>Explore Enchanced Power Saving Mode in BIOS</p> <ul> <li>Newer Lenovo machines support enhanced power saving mode which lowers power consumption during power-off.</li> <li> Won't do: WoL is not supported!</li> </ul> </li> <li> <p> Configure and document BIOS -&gt; Power -&gt; After Power Loss</p> <ul> <li>What option is better for my use-cases? Make sure it's configured everywhere and document it.</li> </ul> </li> <li> <p> Figure out why dnf is very slow</p> <ul> <li>References:<ul> <li>https://unix.stackexchange.com/questions/496775/extremely-slow-dnf</li> <li>https://ostechnix.com/how-to-speed-up-dnf-package-manager-in-fedora</li> </ul> </li> <li>Seems like adding <code>fastestmirror=True</code> to <code>/etc/dnf/dnf.conf</code> helps at least to some degree</li> </ul> </li> <li> <p> Setup pi-hole on the cluster</p> </li> </ul>"},{"location":"installation/post_install/","title":"Post-install","text":""},{"location":"installation/post_install/#backup-secrets","title":"Backup secrets","text":"<p>Save the following files to a safe location like a password manager (if you're using the sandbox, you can skip this step):</p> <ul> <li><code>~/.ssh/homelab_id_ed25519</code></li> <li><code>~/.ssh/homelab_id_ed25519.pub</code></li> <li><code>./metal/kubeconfig.yaml</code> (optional, since you can always restore it via <code>scp</code> from one of the nodes in the cluster)</li> </ul>"},{"location":"installation/post_install/#admin-credentials","title":"Admin credentials","text":"<ul> <li>ArgoCD:<ul> <li>Username: <code>admin</code></li> <li>Password: run <code>./scripts/argocd-admin-password</code></li> </ul> </li> <li>Gitea:<ul> <li>Username: <code>gitea_admin</code></li> <li>Password: get from <code>global-secrets</code> namespace</li> </ul> </li> <li>Kanidm:<ul> <li>Usernames: <code>admin</code> and <code>idm_admin</code></li> <li>Password: run <code>./scripts/kanidm-reset-password admin</code> and <code>./scripts/kanidm-reset-password idm_admin</code></li> </ul> </li> <li>Jellyfin and other applications in the *arr stack: see the dedicated guide for media management</li> <li>Other apps:<ul> <li>Username: <code>admin</code></li> <li>Password: get from <code>global-secrets</code> namespace</li> </ul> </li> </ul>"},{"location":"installation/post_install/#backup","title":"Backup","text":"<p>Now is a good time to set up backups for your homelab. Follow the backup and restore guide to get started.</p>"},{"location":"installation/post_install/#run-the-full-test-suite","title":"Run the full test suite","text":"<p>After the homelab has been stabilized, you can run the full test suite to ensure that everything is working properly:</p> <pre><code>make test\n</code></pre> <p>Warning</p> <p>The \"full\" test suite is still in its early stages; any contributions are greatly appreciated.</p>"},{"location":"installation/post_install/#apps","title":"Apps","text":""},{"location":"installation/post_install/#gitea","title":"Gitea","text":"<ul> <li>Create a new user account   NB! you can also onboard a new user and login to gitea with dex (this is optional, and you can also later associate your onboarded dex user with gitea user). If you don't see \"login with Dex\" on the gitea page, try to re-run the <code>post-install.py</code> script which adds dex oauth to gitea.<ul> <li>(optional) Add ssh key so you can push with ssh</li> <li>Add your github email if you want to associate commits made in gitea with your github account<ul> <li>You can use the noreply email address as well, if your real email is hidden in github</li> </ul> </li> </ul> </li> <li>Login with <code>admin</code> user and add your personal user to the <code>Owners</code> team in the <code>ops</code> organization</li> </ul>"},{"location":"installation/post_install/#woodpecker","title":"Woodpecker","text":"<ul> <li>Login with gitea using <code>gitea_admin</code> user</li> <li>Authorize the application</li> <li>Add the <code>ops/homelab</code> repository</li> </ul>"},{"location":"installation/production/","title":"Production Deployment","text":"<p>This homelab is designed to be created from scratch with one command.</p> <p>Because this project applies GitOps practices, it's the source of truth for my homelab, so you'll need to fork it to make it yours:</p> <p> Fork khuedoan/homelab</p> <p>By using this project you agree to the license.</p> <p>Provided that you've finalized the network configuration, which is optional, and ensured metal requirements and dependencies on external resources are met, simply run:</p> <pre><code>make ktchn8s\n</code></pre> <p>and observe the magic happen.</p> <p>If you want to have more control over the deployment (possibly to run some verifications after each deployment stage), you can follow the following workflow:</p> <ul> <li>Metal provisioning</li> <li>System resources provisioning: <code>make system</code></li> <li>External resources provisioning: <code>make external</code></li> <li>Finalize the installation: <code>make finalize</code><ul> <li>Followed by manual post-install steps</li> </ul> </li> </ul>"},{"location":"installation/production/external/","title":"External Resources/Dependencies","text":"<p>Info</p> <p>These resources are optional, the homelab still works without them but will lack some features like trusted certificates and offsite backup</p> <p>We try to keep the amount of external dependencies to an absolute minimum, but there's still need for a few of them. Below is a list of external resources and why we need them (also see some alternatives below).</p> Provider Resource Purpose Cloudflare DNS DNS and DNS-01 challenge for certificates Cloudflare Tunnel Public services to the internet without port forwarding ntfy Topic External notification service to receive alerts"},{"location":"installation/production/external/#create-credentials","title":"Create credentials","text":"<p>You'll be asked to provide these credentials on first build.</p>"},{"location":"installation/production/external/#cloudflare","title":"Cloudflare","text":"<ul> <li>Buy a domain (from any registrar you like) and set it up with cloudflare<ul> <li>You may also wish to transfer domain to Cloudflare entirely, it's up to you.</li> </ul> </li> <li>Get Cloudflare email and account ID</li> <li>Get Cloudflare Global API key: https://dash.cloudflare.com/profile/api-tokens</li> </ul>"},{"location":"installation/production/external/#ntfy","title":"ntfy","text":"<ul> <li>Choose a random topic name like https://ntfy.sh/random_topic_name_here_a8sd7fkjxlkcjasdw33813 (treat it like your password)</li> </ul>"},{"location":"installation/production/external/#alternatives","title":"Alternatives","text":"<p>To avoid vendor lock-in, each external provider must have an equivalent alternative that is easy to replace:</p> <ul> <li>Cloudflare DNS:<ul> <li>Update cert-manager and external-dns to use a different provider</li> <li>Alternate DNS setup</li> </ul> </li> <li>Cloudflare Tunnel:<ul> <li>Use port forwarding if it's available</li> <li>Create a small VPS in the cloud and utilize Wireguard to route traffic via it</li> <li>Access everything via VPN</li> <li>See also awesome tunneling</li> </ul> </li> <li>ntfy:<ul> <li>Self-host your own ntfy server</li> <li>Any other integration supported by Grafana Alerting</li> </ul> </li> </ul>"},{"location":"installation/production/metal/","title":"Metal Provisioning","text":"<p>TL;DR</p> <pre><code>nix develop\nmake metal\n</code></pre>"},{"location":"installation/production/metal/#pre-requisites","title":"Pre-Requisites","text":""},{"location":"installation/production/metal/#hardware","title":"Hardware","text":""},{"location":"installation/production/metal/#local-controller","title":"Local Controller","text":"<p>Info</p> <p>The local controller is the machine used to bootstrap the cluster. We only need it once during initial provisioning, and you can use your laptop or desktop.</p> <ul> <li>Local controller must be a Linux machine that can run Docker (because the <code>host</code> networking driver used for PXE boot only supports Linux.<ul> <li>You can use a Linux virtual machine with bridged networking if you're on MacOS or Windows.</li> </ul> </li> </ul>"},{"location":"installation/production/metal/#servers","title":"Servers","text":"<p>Any modern <code>x86_64</code> computer(s) should work, use whatever you have on hand.</p> <p>Info</p> <p>Requirements for each node</p> Component Minimum Recommended CPU 2 cores 4 cores RAM 8 GB 16 GB Hard drive 128 GB 256/512 GB <p>Required Capabilities:</p> <ul> <li>Ability to boot from the network (PXE boot)</li> <li>Wake-on-LAN capability, used to wake the machines up automatically without physically touching the power button</li> </ul>"},{"location":"installation/production/metal/#bios-configuration","title":"BIOS Configuration","text":"<p>Info</p> <p>You need to do it once per machine if the default config is not sufficent. Usually for consumer hardware this can not be automated (it requires something like IPMI to automate).</p> <p>Common settings:</p> <ul> <li>Enable Wake-on-LAN (WoL) and network boot</li> <li>Use UEFI mode and disable CSM (legacy) mode</li> <li>Disable secure boot</li> </ul> <p>Boot order options (select one, each has their pros and cons):</p> <ol> <li>Only boot from the network if no operating system found: works on most hardware but you need to manually wipe your hard drive or delete the existing boot record for the current OS</li> <li>Prefer booting from the network if turned on via WoL: more convenience but your BIOS must support it, and you must test it throughly to ensure you don't accidentally wipe your servers<ul> <li>I use this option with some safeguards in place that prevent accidental server wipes</li> <li>My servers will try to boot from network and if they find a PXE server, they will boot from it, otherwise they will reboot, and then boot using the Primary Boot Sequence<ul> <li>During <code>bootstrap</code>, the PXE server is started on the local controller, so the servers will boot from this PXE on WoL</li> <li>Then I have a separate make <code>wake</code> target for just waking up the servers which ensures that the local PXE server on the controller is down before sending WoL magic packets</li> </ul> </li> <li>For servers that don't support it (strangely enough, my M70q gen.2 servers do not...), I've written a separate <code>wipe</code> playbook that allows me to wipe a target server remotely via a single command: <code>make wipe SERVER=megingjord DISK=/dev/nvme0n1</code></li> </ul> </li> </ol> <p>Example</p> <p>Below is an example of my BIOS setup on Lenovo mini PCs:</p> <p>Tip</p> <p>I always reset the BIOS to factory defaults before making any changes, so that I don't have to worry about any custom settings, and only need to worry about modifying a subset of settings w/o worrying about everything else.</p>"},{"location":"installation/production/metal/#leveno-m70q-gen-23","title":"Leveno M70q Gen. \u2154","text":"<ul> <li>Reset to factory defaults</li> <li>Devices -&gt; Network Setup<ul> <li>Wireless LAN -&gt; Disabled</li> <li>PXE IPV4 Network Stack -&gt; Enabled</li> <li>PXE IPV6 Network Stack -&gt; Disabled</li> </ul> </li> <li>Devices -&gt; Bluetooth -&gt; Disabled</li> <li>Advanced -&gt; CPU Setup<ul> <li>VT-d -&gt; Enabled (should be enabled by default, along with most other CPU options)</li> </ul> </li> <li>Power -&gt; Automatic Power On<ul> <li>Wake on LAN -&gt; Network (or Enabled)</li> <li>Wake from Serial Port Ring -&gt; Disabled</li> </ul> </li> <li>Security -&gt; Secure Boot<ul> <li>Secure Boot -&gt; Disabled</li> </ul> </li> <li>Startup<ul> <li>Boot Order:<ul> <li>M.2 Drive 1 (NB! you won't see this option if the drive is wiped, but it should default to this sequence once an OS is installed)</li> <li>SATA 1 (same as above if you use a sata drive)</li> <li>Network 1</li> </ul> </li> <li>First Boot Device -&gt; Boot Order</li> <li>Fast Boot -&gt; Enabled # can cause a loop boot via WoL/PXE even after OS is installed</li> </ul> </li> </ul>"},{"location":"installation/production/metal/#leveno-m720q","title":"Leveno M720q","text":"<ul> <li>Reset to factory defaults</li> <li>Devices -&gt; Network Setup<ul> <li>Wireless LAN -&gt; Disabled</li> <li>PXE IPV4 Network Stack -&gt; Enabled</li> <li>PXE IPV6 Network Stack -&gt; Disabled</li> </ul> </li> <li>Devices -&gt; Bluetooth -&gt; Disabled</li> <li>Advanced -&gt; CPU Setup<ul> <li>VT-d -&gt; Enabled (should be enabled by default, along with most other CPU options)</li> </ul> </li> <li>Power -&gt; Automatic Power On<ul> <li>Wake on LAN -&gt; Automatic</li> </ul> </li> <li>Security -&gt; Secure Boot<ul> <li>Secure Boot -&gt; Disabled</li> </ul> </li> <li>Startup<ul> <li>CSM -&gt; Disabled</li> <li>Primary Boot Sequence  # Used for manual power-on<ul> <li>M.2 Drive 1</li> <li>SATA 1</li> <li>Network 1</li> <li>USB HDD</li> <li>USB CDROM</li> <li>Other Device</li> </ul> </li> <li>Automatic Boot Sequence # Used for Wake-on-LAN<ul> <li>Network 1</li> <li>M.2 Drive 1</li> <li>SATA 1</li> </ul> </li> </ul> </li> </ul>"},{"location":"installation/production/metal/#network","title":"Network","text":"<p>Info</p> <p>This section is optional and you may have your own network setup, which will still work fine. The only pre-requisite is that all your servers are connected to the same wired network as your local controller.</p> <ul> <li> <p>Network Configuration is completed.</p> </li> <li> <p>All nodes are connected to switch ports on Vlan 10 (configured during network installation stage 2 and stage 3).</p> </li> <li> <p>Local controller must be on the same Vlan 10 (i.e. physically connected to one of the switch ports on this Vlan, e.g. <code>g0/0/10</code> on <code>bifrost</code>, which was configured as an additional Vlan 10 port in stage 3 network configuration).</p> </li> </ul>"},{"location":"installation/production/metal/#installation","title":"Installation","text":"<p>Warning</p> <p>This will erase all data on the nodes. Ensure you have backups of any important data before you proceed.</p> <p>Launch the dev shell:</p> <pre><code>nix develop\n</code></pre> <p>Bootstrap the nodes:</p> <pre><code>make metal\n</code></pre>"},{"location":"installation/production/metal/#testing","title":"Testing","text":"<p>Warning</p> <p>These tests are still in a work-in-progress state. Any contributions and improvements are very appreciated and most welcome!</p> <p>Run verifications after the metal nodes have been provisioned with: </p> <pre><code>./tests/metal.sh\n</code></pre>"},{"location":"installation/production/network/","title":"Network Configuration","text":"<p>Warning</p> <p>The following describes my current network components and configurations. Don't blindly copy-paste, but instead use this as a learning point and adjust to your needs, especially if you're using different hardware components.</p> <p>Info</p> <p>For an overview of the network setup refer to Network Architecture page.</p>"},{"location":"installation/production/network/#hardware-requirements","title":"Hardware Requirements","text":"<ul> <li>Cisco C1111-8P Router</li> <li>Cisco C3560-GS-8P Switch</li> <li>Eero 6 Router</li> <li>Serial Console Cable</li> <li>\"Controller\" PC<ul> <li>Any OS can be used, but since I work on Linux I won't provide serial console connectivity specifics for other OSes (which can also easily be found online). PRs with docs improvements are always welcome!</li> </ul> </li> </ul>"},{"location":"installation/production/network/#serial-console-connection","title":"Serial Console Connection","text":""},{"location":"installation/production/network/#software","title":"Software","text":"<p>(In order of preference based on own brief experience)</p> <ul> <li>minicom<ul> <li>easy to get started/configure with self-explanatory built-in help menu</li> <li>seems to have some extra useful functionality</li> <li>NB! default <code>Ctrl-A</code> shortcut conflicts with my current <code>tmux</code> modifier key, hence I usually use <code>minicom</code> outside of <code>tmux</code></li> </ul> </li> <li>screen</li> <li>gtkterm<ul> <li>standalone terminal with easy UI/configurations, but doesn't seem to bring much more value compared to <code>minicom</code></li> <li>only tried it briefly</li> </ul> </li> </ul>"},{"location":"installation/production/network/#steps","title":"Steps","text":"<ul> <li>Install <code>minicom</code> (alternatively install <code>screen</code> or <code>gtkterm</code>, whichever you like best)<ul> <li>On ubuntu: <code>sudo apt install minicom</code></li> </ul> </li> <li>Connect the serial cable to the switch/router and PC</li> <li>Determine the port of the serial cable: <code>sudo dmesg | grep -i tty</code><ul> <li>Let's assume the device port was\u00a0<code>ttyUSB0</code></li> </ul> </li> <li>Follow the minicom configuration guide to configure it</li> <li>Start minicom: <code>sudo minicom</code><ul> <li>Alternatively, using screen: <code>sudo screen /dev/ttyUSB0 9600</code></li> </ul> </li> </ul>"},{"location":"installation/production/network/#references","title":"References","text":"<ul> <li>Troubleshoot and Apply Correct Terminal Emulator Settings for Console Connections</li> <li>C1111 startup-config files<ul> <li>stage 3</li> <li>stage 4</li> </ul> </li> <li>C3560 startup-config files<ul> <li>stage 3</li> </ul> </li> </ul>"},{"location":"installation/production/network/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/production/network/#screen-is-terminating-error","title":"<code>[screen is terminating]</code> error","text":"<p>tldr; either add your user to <code>dialout</code> group, or run <code>screen</code> with <code>sudo</code></p> <p>Long version based on this unix.stackexchange answer:</p> <p>Does the user account\u00a0have the permission to use\u00a0<code>/dev/ttyUSB0</code>? To find out, please run\u00a0<code>ls -l /dev/ttyUSB0</code>. The output might look like this:</p> <pre><code>$ ls -l /dev/ttyUSB0\ncrw-rw----+ 1 root dialout 166, 0 Jul  9 08:55 /dev/ttyUSB0\n</code></pre> <p>The characters at the left-most column are the file type and permissions information:</p> <ul> <li>The first character is\u00a0<code>c</code>, indicating a character-based device.</li> <li>The last character is\u00a0<code>+</code>, indicating that there is an Access Control List (ACL for short) on this device node, specifying further access rules. This is important, because it changes how the other permissions are interpreted.</li> <li>The characters 2-4 are a three-letter group\u00a0<code>rw-</code>\u00a0indicating permissions for the file owner, which is\u00a0<code>root</code>\u00a0as indicated in the third column.</li> <li>The second group of three letters (<code>rw-</code>\u00a0again) would classically indicate permissions applicable to the\u00a0group\u00a0of users the file is assigned to. In this case, the group is\u00a0<code>dialout</code>\u00a0as indicated in the fourth column.\u00a0But because this file has an ACL, the meaning is different:\u00a0with an ACL in effect, it just indicates the highest permissions granted to a specific user or group that is not the file owner - but you cannot know which user or group it is.</li> <li>The third group of three letters (<code>---</code>) indicate access permissions for everyone else - if it's all dashes, it means no access is allowed.</li> <li>The last character is\u00a0<code>+</code>, indicating that there is an Access Control List (ACL for short) on this device node, specifying further access rules.</li> </ul> <p>Lastly, the ACL can be viewed with\u00a0<code>getfacl /dev/ttyUSB0</code>. The output might look something like this:</p> <pre><code>getfacl /dev/ttyUSB0\n</code></pre> <pre><code>getfacl: Removing leading '/' from absolute path names\n# file: dev/ttyUSB0\n# owner: root\n# group: dialout\nuser::rw-\nuser:sddm:rw-\ngroup::rw-\nmask::rw-\nother::---\n</code></pre> <p>Basically, it repeats the traditional non-ACL file permissions and allows specifying extra permissions for any number of users and groups. In this case, there is an extra line\u00a0<code>user:sddm:rw-</code>\u00a0indicating both read and write access to user\u00a0<code>sddm</code>, which is the user account the GUI login manager process\u00a0<code>sddm</code>\u00a0is currently running as. And there's also the\u00a0<code>group::rw-</code>\u00a0line that confirms that the classic\u00a0<code>dialout</code>\u00a0group has full read/write access to this file - this information was hidden from the classic\u00a0<code>ls -l</code>\u00a0output when an ACL was applied to this device node.</p> <p>The fact that an ACL grants permissions to\u00a0<code>sddm</code>\u00a0indicates that this OS is probably configured to automatically grant access to local serial ports if you log in locally using the GUI login dialog. The ACL would be automatically changed to match the logged-in user, and back to\u00a0<code>sddm</code>\u00a0when the user logs out. If such an ACL is not present, then your distribution might not use such an automatic permissions mechanism.</p> <p>The group name\u00a0<code>dialout</code>\u00a0is historical, because serial ports used to be used with modems. But if a device is assigned to a special group like this, it indicates the distribution is probably configured to manage access to serial ports using the\u00a0<code>dialout</code>\u00a0group. So in this example, you might want to add your user account to the\u00a0<code>dialout</code>\u00a0group. You'll need root/superuser access to do that:</p> <pre><code>sudo usermod -a -G dialout eric\n</code></pre> <p>New group memberships take effect at next login, so you'll need to log out and back again. Alternatively run:</p> <pre><code>newgrp dialout\n</code></pre> <p>Because the\u00a0<code>/dev</code>\u00a0filesystem is a virtual, RAM-based filesystem, all the device nodes are created from scratch every time the system boots. Because of this, trying to change the permissions of the actual device nodes would be futile; your changes would be forgotten when you shut down the system. Instead, the default permissions for the devices use specific groups, for the express purpose of allowing the administrators to use group memberships to grant specific users access to specific types of devices: using those groups as intended is probably the easiest way to solve your problem.</p>"},{"location":"installation/production/network/#no-slow-console-output","title":"No (slow) console output","text":"<p>Tip</p> <p>Usually console output problems are related to faulty or poor-quality cables.</p> <ul> <li>Check the cable connection and ensure that the serial console cable is properly connected to both the switch/router and the PC.</li> <li>Try to reset the cable.</li> </ul> <p>References:</p> <ul> <li>https://www.reddit.com/r/homelab/comments/nyacjw/no_console_output_on_cisco_switch/</li> <li>https://community.cisco.com/t5/switching/blank-screen-and-no-console-access-on-cisco-switch/td-p/2964716</li> </ul>"},{"location":"installation/production/network/#configuration-rollout","title":"Configuration Rollout","text":"<p>Info</p> <p>I've broken down the network configuration rollout into several stages which allowed me to work in small, incremental iterations and test/rollback things easier w/o introducing big updates.</p> <p>Tip</p> <p>Before saving the <code>running-config</code>, run <code>show running-config</code> to verify the current running configuration matches your expectations. You can, and should, also test things before saving the running configuration to avoid issues and unnecessary roll-backs. After verifying that everything works as expected and saving the running configuration, I also back up the updated <code>startup-config</code> (e.g. <code>copy startup-config bootflash:/startup-config_stage3.bak</code>) for any future reference and to be able to easily revert to a particular roll-out stage in case of issues.</p>"},{"location":"installation/production/network/#stage-1","title":"Stage 1 - Basic Internet Connectivity via C1111 and Eero","text":"<ul> <li>Goal: Home devices (laptop, phone) can connect to the Eero (in bridge mode) and access the internet. The C1111 handles routing, NAT, and DHCP for the home network.</li> </ul>"},{"location":"installation/production/network/#c1111-configuration-steps","title":"C1111 Configuration Steps","text":"<ul> <li> <p>Initial Access &amp; Factory Reset (Optional but Recommended):</p> <ul> <li>Connect via console cable.</li> <li> <p>If starting fresh:</p> <pre><code>enable\nwrite erase\nreload\n</code></pre> <p>(After reload, when prompted <code>Would you like to enter the initial configuration dialog? [yes/no]:</code>, enter <code>no</code>.)</p> </li> <li> <p>(Optional) Verify/cleanup VTP and Vlan configuration leftovers:</p> <ul> <li>If you've bought a used device, then <code>write erase</code> might not remove old VLANs.</li> <li>Persistence of VLAN/VTP: On devices with integrated switching capabilities (like your C1111-8P) or dedicated switches, VLAN and VTP information can sometimes be more persistent than the rest of the startup configuration. For dedicated Catalyst switches, the <code>vlan.dat</code> file in flash memory is the prime example. For example, my C1111's switch module seems to have a similar mechanism or <code>write erase</code> doesn't touch that specific part of NVRAM as thoroughly as one might expect for these settings.</li> <li>Importance of <code>vtp mode transparent</code> or <code>off</code>: If you inherit a device or aren't sure of its VTP state, setting it to <code>transparent</code> (and ensuring no unwanted domain name) is a crucial first step to prevent it from being adversely affected by or adversely affecting other switches if you were to connect it to a network already using VTP.<ul> <li>To clean up the VTP domain name specifically: <pre><code>configure terminal\n\n! Ensure mode is transparent\nvtp mode transparent\n\n! Try to remove the domain name\nno vtp domain &lt;current_vtp_domain_name&gt;\n\n! If \"no vtp domain\" doesn't work or if you want to explicitly set it to null:\n! vtp domain \"\"\n! (Some IOS versions accept a null string. Test this. If it errors, use a custom name.)\n\n! Or set it to a custom, non-conflicting name:\n! vtp domain MYVTPDOMAIN_UNUSED\n\nexit\nwrite memory\n</code></pre></li> </ul> </li> <li>Thorough Reset Procedure: For a truly \"factory fresh\" state on a switch or device with switching capabilities, beyond <code>write erase</code>, one might also need to:<ul> <li>Delete the <code>vlan.dat</code> file from flash (e.g., <code>delete flash:vlan.dat</code> on Catalyst switches, then reload). The exact procedure or file name might vary for integrated switch modules on routers.</li> <li>Ensure the VTP domain is nullified or set to default, and the mode is transparent or off.</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Basic Device Setup:</p> <pre><code>enable\nconfigure terminal\n\nhostname muspell                        ! Muspelheim in Norse mythology is the primordial realm of fire, according to Snorri,\n                                        ! which was instrumental in the creation of the world\n\nenable secret &lt;your_strong_password&gt;\n\nusername &lt;your_admin_user&gt; privilege 15 secret &lt;your_admin_password&gt;\n\nline con 0\n login local\n logging synchronous                    ! Prevents console messages from interrupting typing\nexit\n\nline vty 0 4\n login local\n transport input ssh\nexit\n\nip domain name midgard.local            ! Or your preferred local domain\n\ncrypto key generate rsa modulus 2048    ! For SSH\n\nservice password-encryption             ! Encrypts plaintext passwords in the config\n\nno ip http server                       ! Disable HTTP management interface\nno ip http secure-server                ! Disable HTTPS management interface\n\nclock timezone UTC 0 0                  ! Or your local timezone\nntp server 0.pool.ntp.org prefer\nntp server 1.pool.ntp.org\nntp server 2.pool.ntp.org\n</code></pre> </li> <li> <p>WAN Interface Configuration (Assuming <code>GigabitEthernet0/0/0</code> is a dedicated routed WAN port):</p> <pre><code>interface GigabitEthernet0/0/0\n description WAN_to_ISP_Modem\n ip address dhcp                ! Assuming the ISP modem provides an IP via DHCP\n ip nat outside\n negotiation auto               ! Usually default, but good to ensure\n no shutdown\nexit\n</code></pre> <ul> <li> <p>Note: The command <code>ip address dhcp</code> should work if your ISP modem is providing DHCP. If your ISP requires PPPoE, the configuration here would be very different (involving a Dialer interface).</p> </li> <li> <p>If <code>GigabitEthernet0/0/0</code> is not a dedicated WAN port and is actually part of the switch block (unlikely for <code>0/0/x</code> naming but possible on some variants):</p> <ul> <li>You would not configure <code>ip address dhcp</code> directly. Instead, you'd create a \"WAN VLAN\" (e.g., VLAN 99), assign this physical port to VLAN 99, create <code>interface Vlan99</code>, and put <code>ip address dhcp</code> and <code>ip nat outside</code> on <code>interface Vlan99</code>.</li> <li>This is a crucial distinction based on your router's specific hardware port types.</li> </ul> </li> </ul> </li> <li> <p>Home Network LAN Configuration (using integrated switchports):</p> <ul> <li> <p>First, create the VLAN globally:</p> <pre><code>vlan 2\n name HOME_NETWORK\nexit\n</code></pre> </li> <li> <p>Next, create the Switched Virtual Interface (SVI) for Layer 3 routing for this VLAN:</p> <pre><code>interface Vlan2\n description Gateway_for_Home_Network_192.168.1.0\n ip address 192.168.1.1 255.255.255.0\n ip nat inside\n no shutdown\nexit\n</code></pre> </li> <li> <p>Then, assign a physical switchport to this VLAN (e.g., <code>GigabitEthernet0/1/0</code> for the Eero):</p> <pre><code>interface GigabitEthernet0/1/0\n description LAN_to_Eero_AP_VLAN2\n switchport mode access      ! This port will only carry traffic for one VLAN\n switchport access vlan 2  ! Assigns this port to VLAN 2\n spanning-tree portfast    ! Recommended for edge ports connected to end devices/APs\n no shutdown\nexit\n</code></pre> </li> </ul> </li> <li> <p>DHCP Server Configuration for Home Network (VLAN 2):</p> <pre><code>ip dhcp excluded-address 192.168.1.1 192.168.1.9  ! Reserve IPs for router, Eero mgmt, etc.\n!\nip dhcp pool HOME_POOL_VLAN2\n network 192.168.1.0 255.255.255.0\n default-router 192.168.1.1         ! Gateway for clients in this pool\n dns-server 1.1.1.1 8.8.8.8         ! Start with public DNS servers\n lease 1                            ! Lease time in days (e.g., 1 day)\n domain-name midgard.local          ! (Optional: provides domain suffix to clients.) Midgard is the realm of humans in Norse mythology\nexit\n</code></pre> </li> <li> <p>Network Address Translation (NAT) Configuration:</p> <ul> <li> <p>Define an access list to identify traffic from your Home Network that needs to be NATted:</p> <pre><code>ip access-list standard ACL_NAT_HOME_NETWORK\n permit 192.168.1.0 0.0.0.255\nexit\n</code></pre> </li> <li> <p>Apply NAT, translating addresses from <code>ACL_NAT_HOME_NETWORK</code> to the IP address of the <code>GigabitEthernet0/0/0</code> (WAN) interface:</p> <pre><code>ip nat inside source list ACL_NAT_HOME_NETWORK interface GigabitEthernet0/0/0 overload\n</code></pre> <ul> <li>Note: This assumes <code>GigabitEthernet0/0/0</code> is the correct NAT outside interface. If your WAN setup uses an SVI (e.g., <code>interface Vlan99</code> because you're using a switchport for WAN), then that SVI would be specified here instead of the physical interface.</li> </ul> </li> </ul> </li> <li> <p>Default Route to the Internet:</p> <ul> <li> <p>If <code>ip address dhcp</code> on the WAN interface (<code>GigabitEthernet0/0/0</code>) successfully obtains an IP and a default gateway from your ISP modem, a default route should be automatically installed. You can verify with <code>show ip route</code>.</p> </li> <li> <p>If a default route is not automatically installed, or if you had a static public IP, you'd add it manually (this is less common for typical home ISP DHCP setups):</p> <pre><code>! ip route 0.0.0.0 0.0.0.0 &lt;IP_of_ISP_Modem_Gateway_on_WAN_subnet&gt;\n! or potentially just:\n! ip route 0.0.0.0 0.0.0.0 GigabitEthernet0/0/0\n</code></pre> <p>For now, we rely on DHCP to provide the route.</p> </li> </ul> </li> <li> <p>Save Configuration:</p> <pre><code>end\nwrite memory\n! or\n! copy running-config startup-config\n</code></pre> </li> <li> <p>(Optional) Disable call-home</p> <pre><code>no service call-home\n! Potentially also remove the call-home profile if you're not using it\nno call-home\nno profile \"CiscoTAC-1\"\n</code></pre> </li> </ul>"},{"location":"installation/production/network/#eero-configuration-steps","title":"Eero Configuration Steps","text":"<ul> <li>Physically connect Eero WAN port to <code>GigabitEthernet0/1/0</code> on C1111.</li> <li>Factory reset Eero if needed.<ul> <li>Note: I didn't perform a reset or anything, keept using existing configuration and mobile eero app as it was</li> <li>Follow Eero app setup instructions.</li> </ul> </li> <li>Configure Eero in Access Point mode:<ul> <li>In order for eeros to be used as Access Points, you will need to wire one eero to your existing router and set it up in Double NAT. Once the setup is complete, you can go to the Settings--Network Settings--DHCP &amp; NAT and select Bridge. Let the system reboot and the eeros will no longer perform DHCP.</li> <li>tldr: connect the Eero to C1111 g0/1/0 port, open eero app and wait for it to show that it has internet connection, then change it to bridge mode, wait for it to restart and show as online again in the app, profit</li> <li>ref: https://www.reddit.com/r/eero/comments/uuuvdc/comment/i9hkazz/?utm_source=share&amp;utm_medium=web3x&amp;utm_name=web3xcss&amp;utm_term=1&amp;utm_content=share_button</li> </ul> </li> <li>Configure WiFi SSID and password (if wasn't configured previously)<ul> <li>Since I didn't reset the Eero router, I could just keep using the existing SSID w/o any modifications needed</li> </ul> </li> </ul>"},{"location":"installation/production/network/#verification-steps","title":"Verification Steps","text":"<ul> <li>On C1111:<ul> <li><code>show ip interface brief</code>:<ul> <li><code>GigabitEthernet0/0/0</code> should be <code>up</code>, <code>up</code>, method <code>DHCP</code>, status <code>administratively down</code> if <code>no shutdown</code> was missed. IP should be public.</li> <li><code>Vlan2</code> should be <code>up</code>, <code>up</code>, with IP <code>192.168.1.1</code>.</li> <li><code>GigabitEthernet0/1/0</code> should be <code>up</code>, <code>up</code>.</li> </ul> </li> <li><code>show vlan brief</code>: Should show VLAN 2 \"HOME_NETWORK\" active with port <code>Gi0/1/0</code> assigned.</li> <li><code>show ip route</code>: Crucially, look for a default route (e.g., <code>S* 0.0.0.0/0 [1/0] via &lt;ISP_GATEWAY_IP&gt;</code> or <code>S* 0.0.0.0/0 is directly connected, GigabitEthernet0/0/0</code> if DHCP sets it that way).</li> <li><code>show ip nat translations</code>: Will be empty initially, but will populate as devices NAT out.</li> <li><code>ping 1.1.1.1 source Vlan2</code> (or <code>ping 1.1.1.1</code> if that doesn't work, try pinging from global exec mode).</li> <li>Verify ntp status on C1111 is synchronized, check ntp associations     <pre><code>sh clock\n14:31:38.416 UTC Wed Jun 11 2025\n</code></pre> <pre><code>sh ntp status\nClock is synchronized, stratum 3, reference is 82.148.168.42\nnominal freq is 250.0000 Hz, actual freq is 249.9955 Hz, precision is 2**10\nntp uptime is 132400 (1/100 of seconds), resolution is 4016\nreference time is EBF411C2.FB22D398 (14:31:30.981 UTC Wed Jun 11 2025)\nclock offset is 0.6257 msec, root delay is 10.39 msec\nroot dispersion is 7941.97 msec, peer dispersion is 188.53 msec\nloopfilter state is 'CTRL' (Normal Controlled Loop), drift is 0.000018037 s/s\nsystem poll interval is 64, last update was 13 sec ago.\n</code></pre> <pre><code>sh ntp associations\n  address         ref clock       st   when   poll reach  delay  offset   disp\n*~82.148.168.42   62.92.229.27     2     48     64     1  1.913   0.625 188.53\n+~192.36.143.130  .PPS.            1     59     64     1 13.999  -1.548 7937.9\n+~77.104.162.218  .PPS.            1     58     64     1 47.970  -3.393 7937.9\n * sys.peer, # selected, + candidate, - outlyer, x falseticker, ~ configured\n</code></pre></li> </ul> </li> <li>Connect a laptop/phone to the Eero's WiFi.</li> <li>Verify laptop/phone gets an IP from <code>192.168.1.x</code> range, gateway <code>192.168.1.1</code>, DNS <code>1.1.1.1</code>/<code>8.8.8.8</code>.</li> <li>Verify laptop/phone can browse the internet.</li> <li>On C1111, <code>show ip nat translations</code> should now show entries.</li> </ul>"},{"location":"installation/production/network/#key-points","title":"Key Points","text":"<ul> <li>The C1111-8P acts like a router with an integrated switch.</li> <li>You define VLANs globally (<code>vlan &lt;id&gt;</code>).</li> <li>You create SVIs (<code>interface Vlan&lt;id&gt;</code>) to give those VLANs Layer 3 gateway IPs.</li> <li>You assign the integrated physical switchports (<code>GigabitEthernet0/1/x</code>) to these VLANs in access mode.</li> <li>The dedicated WAN port (<code>GigabitEthernet0/0/0</code>) is typically a routed port, not a switchport.</li> </ul>"},{"location":"installation/production/network/#stage-2","title":"Stage 2 - Setup Homelab VLAN and Basic Connectivity to C3560 Switch","text":"<ul> <li> <p>Goal: The C3560 switch is connected to the C1111, and the Homelab VLAN (<code>VLAN 10</code>) is active on the C1111. The C3560 can be managed via its IP on VLAN 10, and devices in VLAN 10 (including the switch itself) can potentially reach the internet if NAT is updated.</p> </li> <li> <p>Physical Connection: Connect a network cable from C1111's <code>GigabitEthernet0/1/1</code> port to C3560's <code>GigabitEthernet0/9</code> port (or your chosen uplink port on the C3560).</p> </li> </ul>"},{"location":"installation/production/network/#c1111-configuration-steps_1","title":"C1111 Configuration Steps","text":"<pre><code>! Enter global configuration mode\nconfigure terminal\n\n! --- Homelab VLAN Definition ---\n! Create VLAN 10 globally on the router\nvlan 10\n ! Assign a descriptive name to VLAN 10\n name HOMELAB_SERVERS\nexit\n\n! --- Homelab Switched Virtual Interface (SVI) for Layer 3 ---\n! Create a virtual interface representing VLAN 10 for routing\ninterface Vlan10\n ! Add a description for this interface\n description Gateway_for_Homelab_Network_10.10.10.0\n ! Assign an IP address and subnet mask to this SVI. This will be the gateway for devices in VLAN 10.\n ip address 10.10.10.1 255.255.255.0\n ! Include traffic from this interface in NAT (Network Address Translation)\n ! so devices in VLAN 10 can access the internet via the router's WAN IP.\n ip nat inside\n ! Ensure the interface is administratively up\n no shutdown\nexit\n\n! --- LAN Port Configuration for Connection to C3560 Switch ---\n! Select the physical switchport on the C1111 that connects to the C3560\ninterface GigabitEthernet0/1/1\n ! Add a description for this port\n description Link_To_C3560_Homelab_Switch\n ! Set the port to access mode, meaning it will carry traffic for a single VLAN\n switchport mode access\n ! Assign this access port to VLAN 10\n switchport access vlan 10\n ! Enable PortFast: causes a Layer 2 access port to enter the forwarding state immediately,\n ! bypassing the listening and learning states. Use only on ports connected to end devices or\n ! to another switch where no loops are expected through this port.\n spanning-tree portfast\n ! Ensure the physical port is administratively up\n no shutdown\nexit\n\n! --- Update NAT Access Control List (ACL) ---\n! If you want Homelab devices to have internet access immediately.\n! First, remove the old NAT ACL if it was specific to only the Home Network.\n! (Check your running config for the exact name you used in Stage 1, e.g., ACL_NAT_HOME_NETWORK)\nno ip access-list standard ACL_NAT_HOME_NETWORK\n\n! Create a new (or modify existing) standard ACL to permit traffic from BOTH Home and Homelab networks for NAT.\nip access-list standard ACL_NAT_TRAFFIC_ALL_LANS\n ! Permit traffic from the Home Network (192.168.1.0/24)\n permit 192.168.1.0 0.0.0.255\n ! Permit traffic from the Homelab Network (10.10.10.0/24)\n permit 10.10.10.0 0.0.0.255\nexit\n\nend\n\n! Clear active NAT translations using older NAT acl rule.\n! You need to clear these active translations before you can remove or modify the NAT rule.\n! `*`: This clears all dynamic NAT translations. You can be more specific if needed, but for a homelab environment during setup, clearing all is usually fine and quickest.\n! NB! This will temporarily drop any active internet sessions for devices being NATted by this rule.\nclear ip nat translation *\n\nconfigure terminal\n\n! --- Update NAT Rule to use the new/updated ACL ---\n! First, remove the old NAT rule that used the old ACL.\n! (The interface GigabitEthernet0/0/0 is assumed to be your WAN interface)\nno ip nat inside source list ACL_NAT_HOME_NETWORK interface GigabitEthernet0/0/0 overload\n\n! Apply the new NAT rule using the updated ACL that includes both LANs.\nip nat inside source list ACL_NAT_TRAFFIC_ALL_LANS interface GigabitEthernet0/0/0 overload\n\n! Exit configuration mode\nend\n\n! Save the running configuration to the startup configuration\ncopy running-config startup-config\n! or \"write memory\"\n</code></pre>"},{"location":"installation/production/network/#c3560-configuration-steps-minimal-initial-setup","title":"C3560 Configuration Steps (Minimal Initial Setup)","text":"<ul> <li> <p>Connect to the C3560 via console cable.</p> </li> <li> <p>If it has a previous configuration you want to wipe:</p> <pre><code>enable\nwrite erase\nreload\n</code></pre> <p>(Answer \"no\" to initial configuration dialog if it appears after reload).</p> </li> <li> <p>Configure the switch with the following commands:</p> </li> </ul> <pre><code>! Enter global configuration mode\nconfigure terminal\n\n! --- Basic Device Setup ---\n! Set the hostname for the switch\nhostname bifrost\n\n! Set the enable secret password (for privileged EXEC mode)\nenable secret &lt;your_strong_switch_password&gt;\n\n! Create a local user for login (more secure than just enable password)\nusername &lt;your_admin_user&gt; privilege 15 secret &lt;your_admin_password_for_switch&gt;\n\n! Configure console line for local login\nline con 0\n login local\n logging synchronous ! Prevents console messages from interrupting typing\nexit\n\n! Configure VTY lines (for Telnet/SSH) for local login\nline vty 0 4 ! For the first 5 VTY lines\n login local\n transport input ssh ! Prefer SSH over Telnet. Telnet can be \"transport input telnet\" or \"transport input all\"\nexit\n! (To enable SSH, you'll also need to configure a domain name and generate crypto keys, see below)\n\nservice password-encryption\n\n! Set the IP domain name (required for generating SSH keys)\nip domain name midgard.local\n\n! Generate RSA crypto keys for SSH\ncrypto key generate rsa modulus 2048 ! 1024 is usually sufficient for lab, 2048 for better security\n\n! --- Homelab VLAN Definition on Switch ---\n! Create VLAN 10 on the switch\nvlan 10\n ! Assign a descriptive name to VLAN 10 (should match C1111 for clarity)\n name HOMELAB_SERVERS\nexit\n\n! --- Switch Virtual Interface (SVI) for Management ---\n! Create a virtual interface representing VLAN 10 for switch management\ninterface Vlan10\n ! Add a description for this management interface\n description Management_IP_for_Switch_VLAN10\n ! Assign an IP address and subnet mask to this SVI. This IP is used to manage the switch.\n ip address 10.10.10.2 255.255.255.0\n ! Ensure the interface is administratively up\n no shutdown\nexit\n\n! --- Set Default Gateway for Switch Management ---\n! Configure the default gateway for the switch itself (for management traffic, e.g., NTP, AAA, SSH from other networks)\n! This IP should be the SVI IP of VLAN 10 on the C1111 router.\nip default-gateway 10.10.10.1\n\n! --- Port Configuration for Uplink to C1111 Router ---\n! Select the physical port on the C3560 that connects to the C1111\ninterface GigabitEthernet0/9 ! Or your chosen uplink port (e.g., Gi0/1 if it's a different model/slot)\n ! Add a description for this port\n description Uplink_To_C1111_Router_VLAN10\n ! Set the port to access mode\n switchport mode access\n ! Assign this access port to VLAN 10\n switchport access vlan 10\n ! (PortFast might not be strictly necessary here if this is an uplink to another switch/router,\n !  but for a simple P2P link in access mode to the router's access port, it's generally safe.\n !  If you were trunking, you would not use PortFast on a trunk to another switch.)\n ! spanning-tree portfast\n ! Ensure the physical port is administratively up\n no shutdown\nexit\n\n! (Optional: Configure other switchports for future devices in VLAN 10 later in Stage 3)\n! Example:\n! interface range GigabitEthernet0/1 - 8\n!  switchport mode access\n!  switchport access vlan 10\n!  spanning-tree portfast\n!  no shutdown\n! exit\n\n! dns resolution\nip name-server 1.1.1.1\nip name-server 8.8.8.8\nip domain-lookup source-interface Vlan10\n\n! ntp\nclock timezone UTC 0 0           ! Or your local timezone\nntp server 0.pool.ntp.org prefer\nntp server 1.pool.ntp.org\nntp server 2.pool.ntp.org\n\n! optional, disable VTP if not needed\nvtp mode off\n\n! Exit configuration mode\nend\n\n! Save the running configuration to the startup configuration\ncopy running-config startup-config\n! or \"write memory\"\n</code></pre>"},{"location":"installation/production/network/#optional-controller-pc-ssh-configuration","title":"(Optional) Controller PC ssh configuration","text":"<ul> <li>Ensure the following ssh configuration is present in <code>~/.ssh/config</code>:</li> </ul> <pre><code># 'muspell' C1111 router in homelab vlan\nHost 10.10.10.1 muspell\n  User &lt;your_admin_user&gt;\n\n# 'bifrost' C3560 switch in homelab vlan\nHost 10.10.10.2 bifrost\n  User &lt;your_admin_user&gt;\n  KexAlgorithms +diffie-hellman-group14-sha1\n  HostKeyAlgorithms +ssh-rsa\n</code></pre> <ul> <li>See 'no matching key exchange method found' and 'no matching host key type found' ssh troubleshooting info for more details.</li> </ul>"},{"location":"installation/production/network/#verification-steps_1","title":"Verification Steps","text":"<ul> <li>Physical Connectivity: Ensure the cable between C1111 (<code>Gi0/1/1</code>) and C3560 (<code>Gi0/9</code>) is securely connected.</li> <li>On C1111 Router:<ul> <li><code>show ip interface brief</code>:<ul> <li><code>Vlan10</code> should be <code>up</code>, <code>up</code>, protocol <code>up</code>, IP <code>10.10.10.1</code>.</li> <li><code>GigabitEthernet0/1/1</code> should be <code>up</code>, <code>up</code>, protocol <code>up</code>.</li> </ul> </li> <li><code>show vlan brief</code>: Should show VLAN 10 \"HOMELAB_SERVERS\" active with port <code>Gi0/1/1</code> assigned.</li> <li><code>show cdp neighbors</code>: You should see the C3560-Homelab-Switch listed on <code>GigabitEthernet0/1/1</code>.</li> <li><code>ping 10.10.10.2</code>: Try pinging the C3560's management IP. This tests L3 connectivity from C1111 to C3560 SVI.</li> </ul> </li> <li>On C3560 Switch:<ul> <li><code>show ip interface brief</code>:<ul> <li><code>Vlan10</code> should be <code>up</code>, <code>up</code>, protocol <code>up</code>, IP <code>10.10.10.2</code>.</li> <li><code>GigabitEthernet0/9</code> (or your uplink port) should be <code>up</code>, <code>up</code>, protocol <code>up</code>.</li> </ul> </li> <li><code>show vlan brief</code>: Should show VLAN 10 \"HOMELAB_SERVERS\" active with port <code>Gi0/9</code> (uplink) assigned.</li> <li><code>show cdp neighbors</code>: You should see the C1111-Router listed on <code>GigabitEthernet0/9</code>.</li> <li><code>ping 10.10.10.1</code>: Try pinging the C1111's SVI for VLAN 10. This tests L3 connectivity from C3560 to C1111.</li> <li><code>ping 1.1.1.1</code> (or any public IP): This tests if the C3560 can reach the internet (requires the NAT update on C1111 to be effective).</li> <li><code>ping google.com</code>: Test DNS resolution on the switch.</li> <li>Verify ntp status is synchronized, check ntp associations     <pre><code>sh clock\n14:31:38.416 UTC Wed Jun 11 2025\n</code></pre> <pre><code>sh ntp status\nClock is synchronized, stratum 3, reference is 82.148.168.42\nnominal freq is 250.0000 Hz, actual freq is 249.9955 Hz, precision is 2**10\nntp uptime is 132400 (1/100 of seconds), resolution is 4016\nreference time is EBF411C2.FB22D398 (14:31:30.981 UTC Wed Jun 11 2025)\nclock offset is 0.6257 msec, root delay is 10.39 msec\nroot dispersion is 7941.97 msec, peer dispersion is 188.53 msec\nloopfilter state is 'CTRL' (Normal Controlled Loop), drift is 0.000018037 s/s\nsystem poll interval is 64, last update was 13 sec ago.\n</code></pre> <pre><code>sh ntp associations\n  address         ref clock       st   when   poll reach  delay  offset   disp\n*~82.148.168.42   62.92.229.27     2     48     64     1  1.913   0.625 188.53\n+~192.36.143.130  .PPS.            1     59     64     1 13.999  -1.548 7937.9\n+~77.104.162.218  .PPS.            1     58     64     1 47.970  -3.393 7937.9\n * sys.peer, # selected, + candidate, - outlyer, x falseticker, ~ configured\n</code></pre></li> </ul> </li> <li>From a device on your Home Network (e.g., the controller laptop on <code>192.168.1.x</code>):<ul> <li><code>ping 10.10.10.1</code>: Ping the C1111's Homelab VLAN gateway.</li> <li><code>ping 10.10.10.2</code>: Ping the C3560 switch's management IP.<ul> <li>Note: This inter-VLAN ping will work because the C1111 routes between directly connected networks (<code>Vlan2</code> and <code>Vlan10</code>). No specific ACLs are blocking it yet (those come in stage 4).</li> </ul> </li> <li>Try to SSH to <code>10.10.10.1</code> (the C1111 router) using the admin credentials you set up for the router.</li> <li>Try to SSH to <code>10.10.10.2</code> (the C3560 switch) using the admin credentials you set up for the switch.</li> </ul> </li> </ul>"},{"location":"installation/production/network/#stage-3","title":"Stage 3 - Connect k8s Nodes and NAS to Homelab VLAN &amp; Enable DHCP","text":"<ul> <li> <p>Goal: K8s nodes and NAS are physically connected to the C3560, obtain IPs (or have static IPs configured correctly) in the <code>10.10.10.0/24</code> range, and can access the internet (assuming NAT on C1111 from Stage 2 is working).</p> </li> <li> <p>Physical Connection: Connect your k8s nodes and NAS device to available ports on the C3560 switch (e.g., <code>GigabitEthernet0/1</code> through <code>GigabitEthernet0/8</code>).</p> </li> </ul>"},{"location":"installation/production/network/#c1111-configuration-steps_2","title":"C1111 Configuration Steps","text":"<pre><code>! Enter global configuration mode\nconfigure terminal\n\n! --- DHCP Server Configuration for Homelab Network (VLAN 10) ---\n! This pool will serve IP addresses to devices in the Homelab VLAN.\n\n! Define a range of IP addresses to EXCLUDE from being dynamically assigned by DHCP.\n! These are typically for static assignments (router SVI, switch management IP, servers, MetalLB range, etc.)\nip dhcp excluded-address 10.10.10.1 10.10.10.9      ! Exclude C1111's Vlan10 SVI (10.10.10.1) and C3560's Mgmt IP (10.10.10.2) and reserve a few more addresses for similar purposes (APs etc)\n\n! Exclude IPs you plan to assign to your k8s nodes and NAS.\n! Example:\n!   Control: 10.10.10.1x\n!   Workers: 10.10.10.2x\n!   Storage: 10.10.10.3x\n!   MetalLb: 10.10.10.4x - 10.10.10.6x\nip dhcp excluded-address 10.10.10.10 10.10.10.19    ! k8s control plane nodes\nip dhcp excluded-address 10.10.10.20 10.10.10.29    ! k8s worker nodes\nip dhcp excluded-address 10.10.10.30 10.10.10.39    ! storage nodes\n\n! Exclude the IP range you plan to use for LoadBalancer\n! This range should NOT overlap with any static or DHCP-assigned IPs.\nip dhcp excluded-address 10.10.10.40 10.10.10.69    ! LB IP pool\n\n! Define the DHCP pool for the Homelab network\nip dhcp pool HOMELAB_POOL_VLAN10\n ! Specify the network address and subnet mask for this DHCP pool\n network 10.10.10.0 255.255.255.0\n ! Specify the default gateway IP address for DHCP clients (C1111's SVI for VLAN 10)\n default-router 10.10.10.1\n ! Specify DNS server(s) for DHCP clients.\n ! Start with public DNS. Later, you might change this to your internal DNS server (e.g., Pi-hole).\n dns-server 1.1.1.1 8.8.8.8\n ! Specify the domain name to be provided to DHCP clients (should match global ip domain name for consistency)\n domain-name midgard.local\n ! Specify the lease duration for IP addresses (e.g., 1 day)\n lease 1\nexit\n\n! Use 'interface range' to configure multiple ports simultaneously.\ninterface range GigabitEthernet0/1/2 - 7 ! configure extra ports on the router for your servers/NAS\n ! Add a generic description for these device ports\n description Homelab_Server_Device_Port_VLAN10\n ! Set the ports to access mode, as they will carry traffic for a single VLAN (VLAN 10)\n switchport mode access\n ! Assign these access ports to VLAN 10\n switchport access vlan 10\n ! Enable PortFast: causes Layer 2 access ports to enter the forwarding state immediately.\n ! Use only on ports connected to end devices (like servers/NAS) to avoid STP delays.\n spanning-tree portfast\n ! Ensure the physical ports are administratively up\n no shutdown\nexit\n\n! Exit configuration mode\nend\n\n! Save the running configuration to the startup configuration\ncopy running-config startup-config\n! or \"write memory\"\n</code></pre>"},{"location":"installation/production/network/#c3560-configuration-steps","title":"C3560 Configuration Steps","text":"<pre><code>! Enter global configuration mode\nconfigure terminal\n\n! --- Port Configuration for K8s Nodes and NAS ---\n! Configure the switchports that your K8s nodes and NAS will connect to.\n! This example uses ports Gi0/1 through Gi0/8. Adjust the range as needed.\n\n! Use 'interface range' to configure multiple ports simultaneously.\ninterface range GigabitEthernet0/1 - 8 ! Assuming these are the ports for your servers/NAS\n ! Add a generic description for these device ports\n description Homelab_Server_Device_Port_VLAN10\n ! Set the ports to access mode, as they will carry traffic for a single VLAN (VLAN 10)\n switchport mode access\n ! Assign these access ports to VLAN 10\n switchport access vlan 10\n ! Enable PortFast: causes Layer 2 access ports to enter the forwarding state immediately.\n ! Use only on ports connected to end devices (like servers/NAS) to avoid STP delays.\n spanning-tree portfast\n ! Ensure the physical ports are administratively up\n no shutdown\nexit\n\n! Configure Gi0/10 as an additional port with Vlan 10 access\n! Can be used to e.g. connect a laptop to Vlan 10 directly for PXE-boot provisioning\ninterface GigabitEthernet0/10\n  description \"Homelab additional device port VLAN10\"\n  switchport mode access\n  switchport access vlan 10\n  spanning-tree portfast\n  no shutdown\nexit\n\n! Exit configuration mode\nend\n\n! Save the running configuration to the startup configuration\ncopy running-config startup-config\n! or \"write memory\"\n</code></pre>"},{"location":"installation/production/network/#optional-k8s-nodes-nas-device-network-configuration","title":"(Optional) K8s Nodes &amp; NAS Device Network Configuration","text":"<p>Info</p> <p>This is an optional step and can usually be skipped. However, if you already have your nodes with some pre-installed OS on them, you can use follow the following steps and test the connectivity.  This part is done on the operating system of each server. The method varies by OS (Linux distribution type, etc.).</p> <ul> <li> <p>Physical Connection:</p> <ul> <li>Connect each K8s node (Control 1-3, Worker 1-4) to one of the C3560 switchports you just configured (e.g., <code>Gi0/1</code> through <code>Gi0/8</code>).</li> </ul> </li> <li> <p>IP Configuration on Devices: You have two main options:</p> <ul> <li> <p>Option A: Static IP Configuration (Recommended for Servers/NAS/K8s Nodes):</p> <ul> <li>Manually configure the network interface on each device.</li> <li>Example for K8s Control 1 (<code>10.10.10.10</code>):<ul> <li>IP Address: <code>10.10.10.10</code></li> <li>Subnet Mask: <code>255.255.255.0</code> (or <code>/24</code>)</li> <li>Gateway: <code>10.10.10.1</code> (C1111's SVI for VLAN 10)</li> <li>DNS Server 1: <code>1.1.1.1</code> (or your future internal DNS IP)</li> <li>DNS Server 2: <code>8.8.8.8</code> (optional)</li> </ul> </li> <li>Repeat for all K8s nodes and the NAS, using their designated static IPs (which you excluded from DHCP on the C1111).</li> </ul> </li> <li> <p>Option B: DHCP Client Configuration (Less common for servers, but possible):</p> <ul> <li>Configure the network interface on each device to obtain an IP address automatically via DHCP.</li> <li>If you use this, the device will get an IP from the <code>HOMELAB_POOL_VLAN10</code> range that is not in the excluded list.</li> <li>For consistent IPs with DHCP, you would typically set up DHCP reservations (MAC address to IP mapping) on the C1111. This is more advanced and can be added later if desired. For now, static configuration on the end devices is simpler if you want specific IPs.</li> </ul> </li> </ul> </li> </ul>"},{"location":"installation/production/network/#verification-steps_2","title":"Verification Steps","text":"<ul> <li>On C1111 Router:<ul> <li>If any of your K8s/NAS devices are configured for DHCP (and not in the excluded list), check bindings:     <code>show ip dhcp binding</code> - You should see any devices that successfully got an IP via DHCP from the <code>HOMELAB_POOL_VLAN10</code>.</li> </ul> </li> <li>On C3560 Switch:<ul> <li><code>show mac address-table vlan 10</code>: You should see the MAC addresses of your connected K8s nodes and NAS learned on their respective switchports (e.g., <code>Gi0/1</code>, <code>Gi0/2</code>, etc.).</li> <li><code>show interfaces status</code>: Verify that the ports connected to your K8s nodes/NAS are <code>connected</code> and in <code>vlan 10</code>.</li> </ul> </li> <li>On each K8s Node and NAS Device:<ul> <li>Verify IP Configuration:<ul> <li>Linux: <code>ip addr show &lt;interface_name&gt;</code> or <code>ifconfig &lt;interface_name&gt;</code></li> <li>NAS: Check network settings in its web UI.</li> <li>Confirm the IP, subnet mask, gateway, and DNS servers are correctly set (either statically or received via DHCP).</li> </ul> </li> <li>Test Gateway Connectivity:<ul> <li><code>ping 10.10.10.1</code> (Should reply from C1111's Vlan10 SVI).</li> </ul> </li> <li>Test Internet Connectivity:<ul> <li><code>ping 1.1.1.1</code> (or any public IP like <code>8.8.8.8</code>).</li> <li><code>ping google.com</code> (Tests both internet and DNS resolution).</li> </ul> </li> <li>Test DNS Resolution (if using public DNS for now):<ul> <li>Linux: <code>nslookup google.com</code> or <code>dig google.com</code></li> <li>Confirm it resolves to public IP addresses.</li> </ul> </li> </ul> </li> <li>From a device on your Home Network (e.g., laptop on <code>192.168.1.x</code>):<ul> <li><code>ping 10.10.10.10</code> (Ping K8s Control 1).</li> <li><code>ping 10.10.10.20</code> (Ping K8s Worker 1).<ul> <li>These pings should work because the C1111 routes between VLAN 2 and VLAN 10 by default, and no restrictive ACLs are in place yet.</li> </ul> </li> </ul> </li> <li>Connect a PC to the <code>g0/10</code> port on the C3560 switch<ul> <li><code>ifconfig</code> should show an interface with <code>10.10.10.x</code> IP, e.g.   <pre><code>$ ifconfig\nfoobarbaz: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n    inet 10.10.10.71  netmask 255.255.255.0  broadcast 10.10.10.255\n</code></pre></li> <li>Send a WoL magic packet to a device on homelab network   <pre><code>MAC='11:22:33:44:55:66'       # mac address of the connected target device\nBroadcast='255.255.255.255'   # default broadcast address\nPortNumber=9                  # default port for WoL\necho -e $(echo $(printf 'f%.0s' {1..12}; printf \"$(echo $MAC | sed 's/://g')%.0s\" {1..16}) | sed -e 's/../\\\\x&amp;/g') | nc -w1 -u -b $Broadcast $PortNumber\n</code></pre></li> </ul> </li> </ul>"},{"location":"installation/production/network/#stage-4","title":"Stage 4 - Implement Basic Firewall Rules (ACLs) on C1111","text":"<ul> <li>Goal: Control traffic flow:<ul> <li>From your Home Network to the Homelab Network (allow specific, deny rest).</li> <li>From your Homelab Network to the Home Network (likely deny most, allow specific if needed).</li> <li>From the Internet inbound to your router's WAN interface (default deny unsolicited, allow established).</li> </ul> </li> <li>ACL Logic: ACLs are processed top-down. The first matching rule is applied. There's an implicit <code>deny any any</code> at the end of every ACL, so if no permit rule matches, traffic is dropped.<ul> <li>Each rule is created with explicit priority number for easier updates and management</li> <li>Rules are grouped by category in increments of 100, so new rules can be inserted easier with minimal to none renumbering of existing rules.</li> </ul> </li> </ul>"},{"location":"installation/production/network/#c1111-configuration-steps_3","title":"C1111 Configuration Steps","text":"<pre><code>conf t\n\nobject-group network K8S_LB_POOL_NETS\n 10.10.10.40 255.255.255.248  ! /29\n 10.10.10.48 255.255.255.240  ! /28\n 10.10.10.64 255.255.255.252  ! /30\n 10.10.10.68 255.255.255.254  ! /31\nexit\n\n! --- Define ACL for traffic FROM Home Network ---\nip access-list extended ACL_FROM_HOME_NETWORK\n 10 remark === ACL: FROM HOME NETWORK (192.168.1.x) ===\n 10 remark ============================================\n\n 20 remark --- PERMIT DHCP TRAFFIC (MUST BE EARLY) ---\n 21 remark Permit -&gt; DHCP Discover/Request from clients to broadcast (0.0.0.0 or 192.168.1.x to 255.255.255.255)\n 21 permit udp any host 255.255.255.255 eq bootps\n 22 remark Permit -&gt; DHCP Discover/Request from clients to gateway (0.0.0.0 or 192.168.1.x to 192.168.1.1)\n 22 permit udp any host 192.168.1.1 eq bootps\n 23 remark Permit -&gt; DHCP Offer/ACK from server to broadcast/client (192.168.1.1 to 255.255.255.255 or 192.168.1.x)\n 23 permit udp host 192.168.1.1 eq bootps any eq bootpc\n 99 remark --- END ---\n\n 100 remark --- Specific PERMITS from Home to Management IPs ---\n 101 remark -&gt; Permit SSH from Home to Muspell Router's Homelab SVI (10.10.10.1)\n 101 permit tcp 192.168.1.0 0.0.0.255 host 10.10.10.1 eq 22\n 102 remark -&gt; Permit SSH from Home to Router's Home SVI (192.168.1.1)\n 102 permit tcp 192.168.1.0 0.0.0.255 host 192.168.1.1 eq 22\n 103 remark -&gt; Permit SSH from Home to Bifrost Switch's Homelab SVI (10.10.10.2)\n 103 permit tcp 192.168.1.0 0.0.0.255 host 10.10.10.2 eq 22\n 199 remark --- END ---\n\n 200 remark --- Specific PERMITS from Home to Homelab K8s Nodes ---\n 201 remark -&gt; Permit SSH from Home to k8s odin control\n 201 permit tcp 192.168.1.0 0.0.0.255 host 10.10.10.10 eq 22\n 202 remark -&gt; Permit SSH from Home to k8s thor control\n 202 permit tcp 192.168.1.0 0.0.0.255 host 10.10.10.11 eq 22\n 203 remark -&gt; Permit SSH from Home to k8s heimdall control\n 203 permit tcp 192.168.1.0 0.0.0.255 host 10.10.10.12 eq 22\n 204 remark -&gt; Permit SSH from Home to k8s mjolnir worker\n 204 permit tcp 192.168.1.0 0.0.0.255 host 10.10.10.20 eq 22\n 205 remark -&gt; Permit SSH from Home to k8s gungnir worker\n 205 permit tcp 192.168.1.0 0.0.0.255 host 10.10.10.21 eq 22\n 206 remark -&gt; Permit SSH from Home to k8s draupnir worker\n 206 permit tcp 192.168.1.0 0.0.0.255 host 10.10.10.22 eq 22\n 207 remark -&gt; Permit SSH from Home to k8s megingjord worker\n 207 permit tcp 192.168.1.0 0.0.0.255 host 10.10.10.23 eq 22\n 299 remark --- END ---\n\n 300 remark --- Specific PERMITS from Home to Homelab NAS ---\n 301 remark -&gt; Permit SSH from Home to yggdrasil nas\n 301 permit tcp 192.168.1.0 0.0.0.255 host 10.10.10.30 eq 22\n 302 remark -&gt; Permit SMB/CIFS from Home to yggdrasil nas\n 302 permit tcp 192.168.1.0 0.0.0.255 host 10.10.10.30 eq 445\n 399 remark --- END ---\n\n 400 remark --- Specific PERMITS from Home to Homelab K8s ports ---\n 401 remark -&gt; Permit HTTP from Home to k8s ingress\n 401 remark -&gt; Permit HTTP from Home to K8s LoadBalancer Pool\n 401 permit tcp 192.168.1.0 0.0.0.255 object-group K8S_LB_POOL_NETS eq 80\n 402 remark -&gt; Permit HTTPS from Home to K8s LoadBalancer Pool\n 402 permit tcp 192.168.1.0 0.0.0.255 object-group K8S_LB_POOL_NETS eq 443\n 403 remark -&gt; Permit Home to k8s control plane endpoint\n 403 permit tcp 192.168.1.0 0.0.0.255 host 10.10.10.100 eq 6443\n 404 remark -&gt; Permit SSH from Home to K8s LoadBalancer Pool\n 404 permit tcp 192.168.1.0 0.0.0.255 object-group K8S_LB_POOL_NETS eq 22\n 499 remark --- END ---\n\n 500 remark --- ICMP Rules for Home Network ---\n 501 remark -&gt; Permit Home to ping Homelab\n 501 permit icmp 192.168.1.0 0.0.0.255 10.10.10.0 0.0.0.255 echo\n 502 remark -&gt; Permit Home to receive ping replies from Homelab\n 502 permit icmp 10.10.10.0 0.0.0.255 192.168.1.0 0.0.0.255 echo-reply\n 503 remark -&gt; Permit Ping from Home to K8s LoadBalancer Pool\n 503 permit icmp 192.168.1.0 0.0.0.255 object-group K8S_LB_POOL_NETS echo\n 599 remark --- END ---\n\n 998 remark -&gt; Deny any other Home traffic specifically TO Homelab network and log\n 998 deny ip 192.168.1.0 0.0.0.255 10.10.10.0 0.0.0.255 log\n\n 999 remark -&gt; Permit Home Network to ALL other destinations (e.g., Internet)\n 999 permit ip 192.168.1.0 0.0.0.255 any\nexit\n\n! --- Define ACL for traffic FROM Homelab Network ---\nip access-list extended ACL_FROM_HOMELAB_NETWORK\n 10 remark === ACL: FROM HOMELAB NETWORK (10.10.10.x) ===\n 10 remark ==============================================\n\n 20 remark --- PERMIT DHCP TRAFFIC (MUST BE EARLY) ---\n 21 remark Permit -&gt; DHCP Discover/Request from clients to broadcast (0.0.0.0 or 10.10.10.x to 255.255.255.255)\n 21 permit udp any host 255.255.255.255 eq bootps\n 22 remark Permit -&gt; DHCP Discover/Request from clients to gateway (0.0.0.0 or 10.10.10.x to 10.10.10.1)\n 22 permit udp any host 10.10.10.1 eq bootps\n 23 remark Permit -&gt; DHCP Offer/ACK from server to broadcast/client (10.10.10.1 to 255.255.255.255 or 10.10.10.x)\n 23 permit udp host 10.10.10.1 eq bootps any eq bootpc\n 99 remark --- END ---\n\n 100 remark --- SSH Specific Permits ---\n ! Allow SSH RESPONSES from Router's Homelab SVI (10.10.10.1) to Home Network (needed for your management session)\n 101 remark -&gt; Permit SSH RESPONSES from Router's Homelab SVI (10.10.10.1) to Home Network\n 101 permit tcp host 10.10.10.1 192.168.1.0 0.0.0.255 established\n 102 remark -&gt; Permit SSH RESPONSES from Switch's Homelab SVI (10.10.10.2) to Home Network\n 102 permit tcp host 10.10.10.2 192.168.1.0 0.0.0.255 established\n ! (Optional: Add permits if Homelab needs to SSH to router's Homelab SVI - local management when e.g. laptop is physically connected to homelab network)\n 103 remark -&gt; Permit SSH from Homelab to router's Homelab SVI (local management)\n 103 permit tcp 10.10.10.0 0.0.0.255 host 10.10.10.1 eq 22\n 104 remark -&gt; Permit SSH from Homelab to switch's Homelab SVI (local management)\n 104 permit tcp 10.10.10.0 0.0.0.255 host 10.10.10.2 eq 22\n ! Allow SSH RESPONSES from k8s control to Home Network\n 110 remark -&gt; Permit SSH RESPONSES from odin (10.10.10.10) to Home Network\n 110 permit tcp host 10.10.10.10 192.168.1.0 0.0.0.255 established\n 111 remark -&gt; Permit SSH RESPONSES from odin (10.10.10.11) to Home Network\n 111 permit tcp host 10.10.10.11 192.168.1.0 0.0.0.255 established\n 112 remark -&gt; Permit SSH RESPONSES from heimdall (10.10.10.12) to Home Network\n 112 permit tcp host 10.10.10.12 192.168.1.0 0.0.0.255 established\n ! Allow SSH RESPONSES from k8s workers to Home Network\n 120 remark -&gt; Permit SSH RESPONSES from mjolnir (10.10.10.20) to Home Network\n 120 permit tcp host 10.10.10.20 192.168.1.0 0.0.0.255 established\n 121 remark -&gt; Permit SSH RESPONSES from gungnir (10.10.10.21) to Home Network\n 121 permit tcp host 10.10.10.21 192.168.1.0 0.0.0.255 established\n 122 remark -&gt; Permit SSH RESPONSES from draupnir (10.10.10.22) to Home Network\n 122 permit tcp host 10.10.10.22 192.168.1.0 0.0.0.255 established\n 123 remark -&gt; Permit SSH RESPONSES from megingjord (10.10.10.23) to Home Network\n 123 permit tcp host 10.10.10.23 192.168.1.0 0.0.0.255 established\n ! Allow SSH RESPONSES from k8s storage to Home Network\n 130 remark -&gt; Permit SSH RESPONSES from yggdrasil (10.10.10.30) to Home Network\n 130 permit tcp host 10.10.10.30 192.168.1.0 0.0.0.255 established\n 199 remark --- END ---\n\n ! (Optional: ICMP rules for Homelab, e.g., pinging Home or receiving replies)\n 200 remark --- ICMP Rules for Homelab Network ---\n 201 remark -&gt; Permit Homelab to ping Home\n 201 permit icmp 10.10.10.0 0.0.0.255 192.168.1.0 0.0.0.255 echo\n 202 remark -&gt; Permit Homelab to receive ping replies from Home\n 202 permit icmp 192.168.1.0 0.0.0.255 10.10.10.0 0.0.0.255 echo-reply\n 203 remark -&gt; Permit Homelab to send ping replies TO Home (in response to pings FROM Home)\n 203 permit icmp 10.10.10.0 0.0.0.255 192.168.1.0 0.0.0.255 echo-reply\n 299 remark --- END ---\n\n 400 remark --- K8s specific permits ---\n 401 remark -&gt; Permit ESTABLISHED TCP from K8s LoadBalancer Pool TO Home Network\n 401 permit tcp object-group K8S_LB_POOL_NETS 192.168.1.0 0.0.0.255 established\n 403 remark -&gt; Permit k8s control plane responses to Home Network\n 403 permit tcp host 10.10.10.100 192.168.1.0 0.0.0.255 established\n 499 remark --- END ---\n\n 998 remark -&gt; Deny and log other Homelab Network traffic specifically TO Home Network\n 998 deny ip 10.10.10.0 0.0.0.255 192.168.1.0 0.0.0.255 log\n\n 999 remark -&gt; Permit Homelab Network to ALL other destinations (e.g., Internet)\n 999 permit ip 10.10.10.0 0.0.0.255 any\nexit\n\n! --- Define ACL for traffic FROM Internet (WAN Inbound) ---\nip access-list extended ACL_WAN_INBOUND\n 10 remark === ACL: FROM INTERNET (WAN Inbound) ===\n 10 remark ========================================\n\n 20 remark --- PERMIT DHCP TRAFFIC (MUST BE EARLY) ---\n 21 remark Permit -&gt; DHCP responses TO the router's WAN interface\n 21 remark (Source port is 67 - DHCP/BOOTP Server, Destination port is 68 - DHCP/BOOTP Client)\n 21 permit udp any eq bootps any eq bootpc\n 30 remark --- PERMIT NTP TRAFFIC ---\n 31 remark -&gt; Permit NTP UDP responses from any NTP server (source port 123) to any port on router\n ! it seems like C1111 uses a dynamic port to receive NTP replies, and receiving ports on router seem to be below 1023\n ! 31 permit udp any eq ntp any gt 1023\n 31 permit udp any eq ntp any\n 99 remark --- END ---\n\n 100 remark --- Other WAN rules ---\n 101 remark -&gt; Permit established TCP sessions\n 101 permit tcp any any established\n 102 remark -&gt; Permit DNS UDP responses from any DNS server (source port 53)\n 102 permit udp any eq 53 any gt 1023\n 103 remark -&gt; Permit Ping replies to router's WAN IP\n 103 permit icmp any any echo-reply\n 104 remark -&gt; Permit ICMP Time Exceeded (for traceroute)\n 104 permit icmp any any time-exceeded\n 105 remark -&gt; Permit ICMP Unreachable (for Path MTU discovery etc.)\n 105 permit icmp any any unreachable\n 199 remark --- END ---\n\n 998 remark -&gt; Deny and Log all other unsolicited Internet traffic\n 998 deny ip any any log\nexit\n\n! --- Apply ACLs to Interfaces ---\ninterface Vlan2\n ip access-group ACL_FROM_HOME_NETWORK in\nexit\n\ninterface Vlan10\n ip access-group ACL_FROM_HOMELAB_NETWORK in\nexit\n\ninterface GigabitEthernet0/0/0\n ip access-group ACL_WAN_INBOUND in\nexit\n\nend\n! wr mem or copy run start\n</code></pre> <p>Important Considerations for ACLs:</p> <ul> <li>Order Matters: Rules are processed from top to bottom. The first match wins. Place more specific rules before more general rules.</li> <li>Implicit Deny: There's an invisible <code>deny ip any any</code> at the end of every ACL. If you don't explicitly permit something, it will be denied. The explicit <code>deny ip ... log</code> rules above are for logging purposes.</li> <li><code>log</code> Keyword: Adding <code>log</code> to a rule will generate a syslog message when that rule is hit. This is very useful for troubleshooting and seeing what traffic is being permitted or denied. However, it can generate a lot of logs, especially on deny rules, so use it judiciously or be prepared to filter logs.</li> <li>Source/Destination:<ul> <li>When applying an ACL inbound (<code>in</code>) on an interface:<ul> <li>The \"source\" in the ACL rule refers to where the traffic is coming from before it hits that interface.</li> <li>The \"destination\" refers to where it's going after it passes through that interface.</li> </ul> </li> </ul> </li> <li>Refinement: Start with these basic ACLs. As you deploy services, you might need to refine them. For example, if a Homelab service needs to initiate a connection to a specific cloud service on a non-standard port, you might need to add an outbound ACL or adjust NAT policies (though typically NAT allows all outbound from trusted internal networks).</li> <li>Stateful Inspection: The <code>permit tcp any any established</code> rule relies on the router's ability to track TCP connections. This is a basic form of stateful inspection. For more advanced stateful firewalling, Cisco routers use Zone-Based Firewall (ZBFW), which is more complex to set up than traditional ACLs. For a homelab, these ACLs are a good starting point.</li> </ul>"},{"location":"installation/production/network/#verification-steps_3","title":"Verification Steps","text":"<ol> <li>From a Home Network device (e.g., laptop on <code>192.168.1.x</code>):<ul> <li>Test Permitted Traffic:<ul> <li>SSH to K8s Control 1 (<code>10.10.10.10</code>). Should SUCCEED.</li> <li>Access NAS 1 (<code>10.10.10.30</code>) on permitted ports (e.g., SMB, SSH). Should SUCCEED.</li> <li>Ping any device in the Homelab Network (e.g., <code>ping 10.10.10.20</code> - K8s Worker 1). Should SUCCEED (due to <code>permit icmp ... echo</code>).</li> </ul> </li> <li>Test Denied Traffic:<ul> <li>Try to SSH to a K8s Worker node (e.g., <code>10.10.10.20</code>, assuming no explicit permit rule for it). Should FAIL/TIMEOUT.</li> <li>Try to access NAS 1 on a non-permitted port. Should FAIL/TIMEOUT.</li> </ul> </li> </ul> </li> <li>From a Homelab Network device (e.g., K8s node <code>10.10.10.10</code>):<ul> <li>Test Denied Traffic (to Home Network):<ul> <li>Try to ping a device on your Home Network (e.g., <code>ping 192.168.1.100</code> - your laptop). Should FAIL/TIMEOUT (unless you added a specific permit rule in <code>ACL_HOMELAB_TO_HOME</code>).</li> </ul> </li> <li>Test Internet Access:<ul> <li><code>ping 1.1.1.1</code>. Should SUCCEED (outbound traffic is NATted and not blocked by these ACLs).</li> </ul> </li> </ul> </li> <li>Check C1111 Logs for Denials:<ul> <li>On the C1111 router: <code>show logging</code></li> <li>Look for messages related to ACL denials (e.g., <code>%SEC-6-IPACCESSLOGP: list ACL_HOME_TO_HOMELAB denied tcp 192.168.1.X(port) -&gt; 10.10.10.Y(port)...</code>). This confirms your deny rules are working.</li> </ul> </li> <li>Verify Internet Access for Both Networks: Ensure devices in both Home and Homelab networks can still access the internet as they could before applying ACLs (outbound traffic should generally be unaffected by these inbound ACLs).</li> <li>Check NTP on C1111 and C3560<ul> <li>Verify ntp status is synchronized, check ntp associations     <pre><code>sh clock\n14:31:38.416 UTC Wed Jun 11 2025\n</code></pre> <pre><code>sh ntp status\nClock is synchronized, stratum 3, reference is 82.148.168.42\nnominal freq is 250.0000 Hz, actual freq is 249.9955 Hz, precision is 2**10\nntp uptime is 132400 (1/100 of seconds), resolution is 4016\nreference time is EBF411C2.FB22D398 (14:31:30.981 UTC Wed Jun 11 2025)\nclock offset is 0.6257 msec, root delay is 10.39 msec\nroot dispersion is 7941.97 msec, peer dispersion is 188.53 msec\nloopfilter state is 'CTRL' (Normal Controlled Loop), drift is 0.000018037 s/s\nsystem poll interval is 64, last update was 13 sec ago.\n</code></pre> <pre><code>sh ntp associations\n  address         ref clock       st   when   poll reach  delay  offset   disp\n*~82.148.168.42   62.92.229.27     2     48     64     1  1.913   0.625 188.53\n+~192.36.143.130  .PPS.            1     59     64     1 13.999  -1.548 7937.9\n+~77.104.162.218  .PPS.            1     58     64     1 47.970  -3.393 7937.9\n * sys.peer, # selected, + candidate, - outlyer, x falseticker, ~ configured\n</code></pre></li> </ul> </li> </ol> <p>Tip</p> <p>Some of the above tests can be run with this script.</p>"},{"location":"installation/production/network/#troubleshooting_1","title":"Troubleshooting","text":""},{"location":"installation/production/network/#ssh-error-no-matching-key-exchange-method-found","title":"SSH error 'no matching key exchange method found'","text":"<p>Problem:</p> <p>After completing stage 2 setup on both C1111 and C3560, the following test was failing from a home network laptop:</p> <pre><code>ssh user@10.10.10.2\nUnable to negotiate with 10.10.10.2 port 22: no matching key exchange method found. Their offer: diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1\n</code></pre> <p>The following is showed in c3560 console:</p> <pre><code>Jan  2 00:14:02.766: %SSH-3-NO_MATCH: No matching kex algorithm found: client curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp3841...\n</code></pre> <p>Explanation:</p> <p>This is a classic compatibility issue between modern SSH clients and older network gear like the Cisco Catalyst 3560.</p> <p>The laptop's SSH client (which is likely using modern, more secure algorithms) is trying to negotiate a Key Exchange (KEX) method with the Cisco 3560. The 3560, running older software, only supports older, less secure KEX methods based on SHA-1 (like <code>diffie-hellman-group-exchange-sha1</code>, <code>diffie-hellman-group14-sha1</code>, <code>diffie-hellman-group1-sha1</code>). Modern SSH clients are configured by default to reject these older, potentially vulnerable methods. As a result, Neither side can find a mutually agreeable way to establish the secure channel, so the connection fails immediately.</p> <p>The Solution:</p> <p>The most practical way to fix this is to configure the SSH client on the laptop to temporarily accept one of the older KEX algorithms that the Cisco 3560 does offer.</p> <p>Warning</p> <p>Accepting older, SHA-1 based key exchange algorithms is inherently less secure than using modern ones. Use this as a workaround to connect to the device, ideally while planning for a potential IOS upgrade on the 3560 (if available and feasible) or limiting where you use this configuration.</p> <ul> <li> <p>You can either specify the algorithm on the command line or configure your SSH client file.</p> <ul> <li> <p>Using the Command Line (Temporary for Testing):     This is the quickest way to test if this is the issue.</p> <ul> <li>Open your terminal or command prompt.</li> <li>Use the <code>-o KexAlgorithms</code> option to specify an accepted algorithm. Pick one from the C3560's offer list. <code>diffie-hellman-group14-sha1</code> is slightly preferred over <code>group1-sha1</code>.</li> <li>Enter the command:   <pre><code>ssh -o KexAlgorithms=diffie-hellman-group14-sha1 user@10.10.10.2\n</code></pre></li> <li>If this connects, the KEX mismatch was indeed the problem.</li> </ul> </li> <li> <p>Using the SSH Config File (More Permanent):     This is better if you need to connect to this device frequently.</p> <ul> <li>Open a terminal or command prompt.</li> <li>Navigate to or create the <code>.ssh</code> directory in your user's home directory: <code>cd ~/.ssh</code> (If it doesn't exist, create it: <code>mkdir ~/.ssh</code>).</li> <li>Open the <code>config</code> file in a text editor (e.g., <code>nano ~/.ssh/config</code> or <code>notepad ~/.ssh/config</code> on Windows).</li> <li>Add the following block to the file. Replace <code>10.10.10.2</code> if you need to connect using a hostname instead.   <pre><code>Host 10.10.10.2\n    KexAlgorithms +diffie-hellman-group14-sha1\n</code></pre> NB! The <code>+</code> sign is important! It tells the client to add <code>diffie-hellman-group14-sha1</code> to its list of acceptable algorithms, rather than replacing the entire list. This is safer.</li> <li>Save the file.</li> <li>Now, try connecting using your regular command:   <pre><code>ssh user@10.10.10.2\n</code></pre></li> </ul> </li> <li> <p>On the Cisco 3560 (Verification):</p> <p>You don't usually need to configure the 3560 itself for this specific issue, as the problem is the client rejecting what the server offers. However, you can verify the available algorithms on the switch using:</p> <pre><code>show ip ssh server algorithms\n</code></pre> <p>This command will list the supported KEX, encryption (cipher), and integrity (MAC) algorithms. Confirm that the list includes the <code>diffie-hellman-group</code> options.</p> </li> </ul> </li> </ul>"},{"location":"installation/production/network/#ssh-error-no-matching-host-key-type-found","title":"SSH error 'no matching host key type found'","text":"<p>After fixing the above error, I started getting another one when connecting to the same switch:</p> <pre><code>ssh -o KexAlgorithms=diffie-hellman-group14-sha1 user@10.10.10.2\nUnable to negotiate with 10.10.10.2 port 22: no matching host key type found. Their offer: ssh-rsa\n</code></pre> <p>The Problem:</p> <p>After key exchange, the server (the Cisco 3560) presents its host key to the client. This host key is used by the client to verify the server's identity (to prevent Man-in-the-Middle attacks). The error message tells you:</p> <ul> <li>The switch is offering a host key of type <code>ssh-rsa</code>.</li> <li>Your modern SSH client is not configured by default to accept <code>ssh-rsa</code> as a valid host key type.</li> </ul> <p>Why is this happening?</p> <ul> <li>More recent versions of OpenSSH clients (starting around version 8.2) have started disabling <code>ssh-rsa</code> by default when the server uses SHA-1 for signing, because SHA-1 is considered cryptographically weak. Older Cisco IOS versions often rely on SHA-1 for this.</li> <li>While the host key itself might be RSA, the signature algorithm used with it might be <code>rsa-sha2-256</code> or <code>rsa-sha2-512</code> on modern servers. Older servers only support the original <code>ssh-rsa</code> signature which implicitly uses SHA-1.</li> </ul> <p>The Solution:</p> <p>Similar to the KEX issue, you need to configure your SSH client to accept <code>ssh-rsa</code> as a valid host key type for this specific connection.</p> <p>Warning</p> <p>As before, enabling older algorithms carries potential security risks. Only do this when connecting to trusted legacy devices and be aware that you are relying on less robust cryptography for server identity verification.</p> <ul> <li> <p>Using the Command Line (Temporary for Testing):</p> <p>Add another <code>-o</code> option for <code>HostKeyAlgorithms</code>. You can chain multiple <code>-o</code> options.</p> <pre><code>ssh -o KexAlgorithms=diffie-hellman-group14-sha1 -o HostKeyAlgorithms=ssh-rsa user@10.10.10.2\n</code></pre> <p>Note: You might need to add the <code>+</code> prefix here as well, especially if you have a very recent SSH client, although sometimes <code>ssh-rsa</code> alone works for <code>HostKeyAlgorithms</code>:</p> <pre><code># If the above fails, try adding '+'\nssh -o KexAlgorithms=diffie-hellman-group14-sha1 -o HostKeyAlgorithms=+ssh-rsa user@10.10.10.2\n</code></pre> </li> <li> <p>Using the SSH Config File (More Permanent):</p> <p>Edit your <code>~/.ssh/config</code> file again. Add a line for <code>HostKeyAlgorithms</code> under the <code>Host</code> block for 10.10.10.2. Use the <code>+</code> prefix to add <code>ssh-rsa</code> without removing other, more secure host key types you might need for other servers.</p> <pre><code>Host 10.10.10.2\n    KexAlgorithms +diffie-hellman-group14-sha1\n    HostKeyAlgorithms +ssh-rsa  # Add this line\n</code></pre> <p>Save the file. Now try connecting with the regular command:</p> <pre><code>ssh user@10.10.10.2\n</code></pre> </li> </ul>"},{"location":"installation/production/network/#testing","title":"Testing","text":"<p>Warning</p> <p>These tests are still in a work-in-progress state. Any contributions and improvements are very appreciated and most welcome!</p> <p>Run verifications after the network has been configured with: </p> <pre><code>./tests/network_stage4.sh\n</code></pre>"},{"location":"reference/architecture/","title":"Reference Architecture","text":"<ul> <li>Overview</li> <li>Network</li> <li>Decisions</li> </ul>"},{"location":"reference/architecture/decision_records/","title":"Architecture Decision Records","text":"<p>Architecture decisions play a crucial role in driving the design and development of a software project. They guide the selection of technologies, the design of software components, and the organization of the codebase. However, these decisions are often made in isolation and without proper documentation. This can lead to confusion, inconsistencies, and suboptimal solutions. Moreover, it makes it nearly impossible to answer questions like \"why did we decide to do this? \ud83e\udd14\" as the time goes on.</p> <p>Therefore, it is important to keep a record of architecture decisions, including the context, the decision itself, and the consequences. This practice, known as Architecture Decision Records (ADRs), fosters transparency, improves communication, and provides a historical context to help future decision-making.</p> <p>This page contains a list of ADRs, both overarching (with cross-cutting concerns across the entirety of ktchn8s), as well as those specific to a given component.</p> <p>We follow a simple template for documenting architecture decisions, which is inspired by this Michael Nygard's post</p> Template <p>## AD-000X - Title</p> <p>These documents have names that are short noun phrases. For example, \"ADR 1: Deployment on Ruby on Rails 3.0.10\" or \"ADR 9: LDAP for Multitenant Integration\" We prefix the title with the ADR number for easier reference.</p> <p>Context</p> <p>This section describes the forces at play, including technological, political, social, and project local. These forces are probably in tension, and should be called out as such. The language in this section is value-neutral. It is simply describing facts.</p> <p>Decision</p> <p>This section describes our response to these forces. It is stated in full sentences, with active voice. \"We will \u2026\"</p> <p>Status</p> <p>A decision may be \"proposed\" if the project stakeholders haven't agreed with it yet, or \"accepted\" once it is agreed. If a later ADR changes or reverses a decision, it may be marked as \"deprecated\" or \"superseded\" with a reference to its replacement. While it may not seem necessary to have 'status' section for a project with a single maintainer, decisions may also come from external parties, for example from discussions in pull-requests, so it is still useful to have this section and document these decisions, as well as reasoning behind i.e. rejecting a proposed change.</p> <p>Consequences</p> <p>This section describes the resulting context, after applying the decision. All consequences should be listed here, not just the \"positive\" ones. A particular decision may have positive, negative, and neutral consequences, but all of them affect the team and project in the future.</p>"},{"location":"reference/architecture/decision_records/#ad-0001-plugging-c1111-router-directly-into-isp-modem","title":"AD-0001 - Plugging C1111 router directly into ISP modem","text":"<p>Context</p> <p>Before I started home-labbing, our home network was managed via an Eero 6 router connected to the ISP modem.</p> <p>I initially thought to connect the C1111 router to the Eero:</p> <pre><code>flowchart LR\n    I[Internet] -.- M[ISP Modem] o--o E[Eero 6 Router] o--o C[C1111 Router]\n    E -.- |wlan| D[Home Devices]\n    C o--o H[Homelab Servers]</code></pre>  Hold \"Alt\" / \"Option\" to enable Pan &amp; Zoom  <p>This would, however, result in Double-NAT, which is usually not recommended.</p> <p>I found out that Eero can be used as an Access Point in this post by first wiring one eero to your existing router and setting it up in Double NAT. Once the setup is complete, you can go to the Settings \u2192 Network Settings \u2192 DHCP &amp; NAT and select Bridge. Eero will restart and then work as an Access Point.</p> <p>Therefore, I can use C1111 as the main (and only) router, and use the existing Eero 6 router as an AP.</p> <p>Decision</p> <ul> <li>We will connect the C1111 router directly to the ISP modem, and connect Eero 6 to C1111, using Eero router as an AP.</li> </ul> <pre><code>flowchart LR\n    I[Internet] -.- M[ISP Modem] o--o C[C1111 Router] o--o E[Eero 6 WiFi AP]\n    E -.- |wlan| D[Home Devices]\n    C o--o H[Homelab Servers]</code></pre>  Hold \"Alt\" / \"Option\" to enable Pan &amp; Zoom  <p>Status</p> <ul> <li>Accepted</li> </ul> <p>Consequences</p> <ul> <li>No Double-NAT</li> <li>Eero 6 will be used as an Access Point, which will allow us to use it for WiFi connectivity.</li> <li>Eero 6 in bridge mode has limited functionality (e.g. you won't be able to enable built-in security settings anymore)<ul> <li>This is not a big problem because we can ensure security via router or pfsense or something similar.</li> </ul> </li> </ul>"},{"location":"reference/architecture/decision_records/#ad-0002-disable-grub_timeout","title":"AD-0002 - Disable GRUB_TIMEOUT","text":"<p>Context</p> <p>Two of my machines (namely M70q Gen.2) won't go past GRUB unless keyboard is plugged in.</p> <p>When I was bootstrapping my newer machines, two of them failed on a task that does periodic pings to wait for machine to come online. I plugged the monitor into one of them and found that it was hanging on the GRUB screen with the first option highlighted. So I needed to plug the keyboard back in and select the entry manually. Other machines start an automatic countdown whether they detect a kb or not, but on these no keyboard -&gt; no countdown -&gt; no boot, just stuck on the GRUB screen.</p> <p>I've researched a bit and some suggest finding a BIOS setting that says \"ignore keyboard errors\" or something like that, but none of my Lenovos have such option.</p> <p>So the alternative was to disable the GRUB timeout altogether.</p> <p>Decision</p> <ul> <li>We will set <code>GRUB_TIMEOUT=0</code> and <code>GRUB_TIMEOUT_STYLE=hidden</code> to disable the GRUB menu and boot directly into the default entry.</li> </ul> <p>Status</p> <ul> <li>Accepted</li> </ul> <p>Consequences</p> <ul> <li>The system will boot directly into the default entry without showing the GRUB menu, so no need to fiddle with keyboards etc</li> <li>GRUB can still be accessed by holding down the Shift key during boot.<ul> <li>Some people report that holding Shift doesn't always work. See e.g. Grub menu at boot time... \"holding shift\" not working for troubleshooting.</li> </ul> </li> <li> <p>I've tested this on my M70q Gen.2 machines, and simply setting <code>GRUB_TIMEOUT=0</code> with <code>GRUB_TIMEOUT_STYLE=hidden</code> worked fine. However, if those settings don't seem to do anything, one might try a workaround as described in this post:</p> <p>If the \"GRUB_TIMEOUT=0\" does not work, does your system begin a countdown when the menu displays or does it await input from you? If there is no countdown it's possible that grub is detecting a 'recordfail' and will wait for input. We can change that behaviour as well but by a different method.</p> <p>For now, if the TIMEOUT setting doesn't work, open /etc/grub.d/00_header and go to approximately line 238:</p> <pre><code>gksu gedit +238 /etc/grub.d/00_header\n</code></pre> <p>Find this section and make the changes in dark red, then save the file and run \"sudo update-grub\".</p> <pre><code>make_timeout ()\n{\ncat &lt;&lt; EOF\nif [ \"\\${recordfail}\" = 1 ]; then\nset timeout=-1\nelse\n\n# Manually change timeout to 0\n# set timeout=${2}\nset timeout=0\n# End manual change\n\nfi\nEOF\n}\n</code></pre> <p>This should eliminate the menu display unless there is a \"recordfail\" event. It also preserves the ability to display the menu by holding down the SHIFT key during boot. Please let me know if this solution works for you.</p> </li> </ul>"},{"location":"reference/architecture/network/","title":"Network Overview","text":"<pre><code>%% mermaid config https://mermaid.js.org/config/schema-docs/config.html#theme\n%%{init: {\n  \"theme\": \"base\",\n  \"flowchart\": {\"defaultRenderer\": \"elk\", \"curve\": \"linear\", \"markdownAutoWrap\":\"false\", \"wrappingWidth\": \"800\"},\n  'themeVariables': { \"fontSize\": \"24px\", \"fontFamily\": \"IBM Plex Sans\" }\n} }%%\ngraph TB\n    subgraph GrL[Legend]\n      direction LR\n      LD1@{ shape: rect, label: \"Device 1\" }\n      LD2@{ shape: rect, label: \"Device 2\" }\n      LS2@{ shape: rect, label: \"Service\"}\n      LI@{ shape: rect, label: \"Internet\"}\n\n      LD1 o--o |eth/wifi&lt;br&gt;connection| LD2\n      LD2  --&gt; |network&lt;br&gt;communication| LI\n      LD1  --&gt; |network&lt;br&gt;communication| GrLS1\n\n      subgraph GrLS1[k8s]\n        direction TB\n        LP1@{ shape: rect, label: \"Pod\" }\n        LS1@{ shape: rect, label: \"Service\"}\n\n        LP1  --- |runs| LS1\n      end\n\n      subgraph GrLS2[k8s]\n        direction TB\n        LP2@{ shape: rect, label: \"Pod\" }\n        LS2@{ shape: rect, label: \"Service\"}\n\n        LP2  --- |runs| LS2\n      end\n      GrLS2 &lt;--&gt; |network&lt;br&gt;communication| GrLS1\n      GrLS1  --&gt; |network&lt;br&gt;communication| LI\n    end\n\n    subgraph Info\n        homelab_info@{ shape: text, label: \"\n             **Default Gateway**\n             *midgard*: &lt;code&gt;192.168.1.1&lt;/code&gt;\n             *asgard*:  &lt;code&gt;10.10.10.1&lt;/code&gt;\n             &lt;br&gt;\n             **Domain Name**: &lt;code&gt;midgard.local&lt;/code&gt;\n        \" }\n    end\n\n    subgraph GrHL[\"Asgard (Vlan10)&lt;br&gt;(10.10.10.0/24)\"]\n        %% cisco switch\n        C3560@{ shape: circle, label: \"Cisco C3560-GS-8P&lt;br&gt;(bifrost)&lt;br&gt;(10.10.10.2)\" }\n\n        %% k8s devices\n        %% control plane\n        A@{ shape: rect, label: \"Ctrl-1&lt;br&gt;(odin)&lt;br&gt;(10.10.10.10)\" }\n        B@{ shape: rect, label: \"Ctrl-2&lt;br&gt;(freyja)&lt;br&gt;(10.10.10.11)\" }\n        C@{ shape: rect, label: \"Ctrl-3&lt;br&gt;(heimdall)&lt;br&gt;(10.10.10.12)\" }\n        %% worker nodes\n        D@{ shape: rect, label: \"Wrkr-1&lt;br&gt;(mjolnir)&lt;br&gt;(10.10.10.20)\" }\n        E@{ shape: rect, label: \"Wrkr-2&lt;br&gt;(gungnir)&lt;br&gt;(10.10.10.21)\" }\n        F@{ shape: rect, label: \"Wrkr-3&lt;br&gt;(draupnir)&lt;br&gt;(10.10.10.22)\" }\n        G@{ shape: rect, label: \"Wrkr-4&lt;br&gt;(megingjord)&lt;br&gt;(10.10.10.23)\" }\n        H@{ shape: rect, label: \"Wrkr-5&lt;br&gt;(hofund)&lt;br&gt;(10.10.10.24)\" }\n        I@{ shape: rect, label: \"Wrkr-6&lt;br&gt;(gjallarhorn)&lt;br&gt;(10.10.10.25)\" }\n        J@{ shape: rect, label: \"Wrkr-7&lt;br&gt;(gleipnir)&lt;br&gt;(10.10.10.26)\" }\n        K@{ shape: rect, label: \"Wrkr-8&lt;br&gt;(brisingamen)&lt;br&gt;(10.10.10.27)\" }\n        L@{ shape: rect, label: \"Wrkr-9&lt;br&gt;(skidbladnir)&lt;br&gt;(10.10.10.28)\" }\n        M@{ shape: rect, label: \"Wrkr-10&lt;br&gt;(lafnir)&lt;br&gt;(10.10.10.29)\" }\n        %% nas devices\n        S1@{ shape: rect, label: \"NAS-1&lt;br&gt;(yggdrasil)&lt;br&gt;(10.10.10.30)\" }\n\n        C3560 o--o   |g0/1::eno1| A\n        C3560 o--o   |g0/2::eno1| B\n        C3560 o--o   |g0/3::eno1| C\n        C3560 o--o   |g0/4::eno1| S1\n        C3560 o--o   |g0/5::eno1| D\n        C3560 o--o   |g0/6::eno1| E\n        C3560 o--o   |g0/7::eno1| F\n        C3560 o--o   |g0/8::eno1| G\n        C1111 o--o |g0/0/3::eno1| H\n        C1111 o--o |g0/0/4::eno1| I\n        C1111 o--o |g0/0/5::eno1| J\n        C1111 o--o |g0/0/6::eno1| K\n        C1111 o--o |g0/0/7::eno1| L\n        C1111 o--o |g0/0/8::eno1| M\n\n        subgraph GrKC[\"K8S Cluster\"]\n            IC@{ shape: subproc, label: \"Ingress Controller\" }\n            CFD@{ shape: subproc, label: \"cloudflared pod(s)\" }\n            LB@{ shape: subproc, label: \"Cilium\" }\n            PD@{ shape: subproc, label: \"Pod\" }\n            SVC@{ shape: rect, label: \"Service\" }\n\n            CFD &lt;--&gt; IC\n            SVC  --&gt; IC\n            LB  &lt;--&gt; IC\n            PD   --- SVC\n        end\n    end\n\n    ISP@{ shape: rect, label: \"ISP\" }\n\n    subgraph GrHN[\"Midgard (Vlan2)&lt;br&gt;(192.168.1.0/24)\"]\n        direction TB\n\n        DV@{ shape: rect, label: \"\ud83d\udcbb / \ud83d\udda5\ufe0f / \ud83d\udcf1\" }\n        ISPM@{ shape: circle, label: \"ISP Modem\" }\n        EER@{ shape: circle, label: \"Eero 6&lt;br&gt;(Bridge)\" }\n        C1111@{ shape: circle, label: \"Cisco C1111-8P&lt;br&gt;(muspell)&lt;br&gt;(192.168.1.1)\" }\n\n        %% physical connections\n        ISPM  o--o |eth0::g0/0/0; DHCP| C1111\n        DV    o--o |WiFi/Eth| EER\n        C1111 o--o |g0/1/0::eth0| EER\n        C1111 o--o |g0/1/1::g0/9| C3560\n    end\n\n    ISP   o--o |fiber| ISPM\n    C1111  --&gt; GrI\n\n    subgraph GrI[Internet]\n        direction LR\n        W3@{ shape: rounded, label: \"WWW\" }\n\n        subgraph \"Cloud Services\"\n            CF@{ shape: rounded, label: \"Cloudflare\" }\n        end\n\n        W3 --&gt; CF\n        CFD  --&gt; |Cloudflare Tunnel| CF\n    end\n\n    %% Styling\n\n    classDef cloud  fill:#d08770,stroke:#333,stroke-width:2px\n    classDef device fill:#81a1c1,stroke:#333,stroke-width:2px\n    classDef pod    fill:#a3be8c,stroke:#333,stroke-width:2px\n\n    classDef text color:green\n    class homelab_info text\n\n    class W3,CF cloud\n    class A,B,C,D,E,F,G,H,I,J,K,L,M,S1,C1111,C3560,DV,ISPM,EER device\n    class IC,CFD,LB,PD pod\n\n    %% legend elements separately for readability\n    class LD1,LD2 device\n    class LI cloud\n    class LP1,LP2 pod\n    class LS1,LS2 service</code></pre>  Hold \"Alt\" / \"Option\" to enable Pan &amp; Zoom"},{"location":"reference/architecture/overview/","title":"Architecture Overview","text":"<p>This page provides a high-level architecture and component overview of my homelab.</p>"},{"location":"reference/architecture/overview/#components","title":"Components","text":""},{"location":"reference/architecture/overview/#main","title":"Main","text":"<pre><code>architecture-beta\n    group home(si:kubernetes)[ktchn8s]\n\n    group control(mdi:account-tie-hat)[control] in home\n    group worker(mdi:worker)[worker] in home\n    group storage(mdi:network-attached-storage)[storage] in home\n\n    service odin(server)[odin] in control\n    service freyja(server)[freyja] in control\n    service heimdall(server)[heimdall] in control\n\n    service draupnir(server)[draupnir] in worker\n    service megingjord(server)[megingjord] in worker\n\n    service yggdrasil(server)[yggdrasil] in storage\n    service disks(disk)[6x18TB] in storage\n\n    yggdrasil:B -- T:disks\n\n    odin{group}:R &lt;--&gt; L:draupnir{group}\n    odin{group}:B &lt;--&gt; T:yggdrasil{group}\n    megingjord{group}:L &lt;--&gt; R:yggdrasil{group}\n\n    %% external services\n\n    group external(mdi:cloud)[external]\n\n    service cloudflare(si:cloudflare)[cloudflare] in external\n    service letsencrypt(si:letsencrypt)[letsencrypt] in external\n\n    cloudflare{group}:B &lt;--&gt; T:heimdall{group}</code></pre>  Hold \"Alt\" / \"Option\" to enable Pan &amp; Zoom  <p>From code perspective, the above looks as follows:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  ./apps      \u2502        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  ./platform  \u2502&lt;------&gt;\u2502 ./external \u2502\n\u2502  ./system    \u2502        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502  ./metal     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u250a   HARDWARE   \u250a\n\u2514\u2504\u2504\u2504\u2504\u2504\u2504\u2504\u2504\u2504\u2504\u2504\u2504\u2504\u2504\u2518\n</code></pre> <ul> <li><code>./metal</code>: bare metal provisioning (install and configure Linux, Kubernetes, etc.)</li> <li><code>./system</code>: critical system components for the cluster (load balancer, storage, ingress, operation tools...)</li> <li><code>./platform</code>: components for service hosting platform (git, build runners, dashboards...)</li> <li><code>./apps</code>: user facing applications</li> <li><code>./external</code>: (optional) services that live outside of the cluster</li> </ul>"},{"location":"reference/architecture/overview/#other","title":"Other","text":"<ul> <li><code>./docs</code>: documentation written in Markdown and served with mkdocs</li> <li><code>./scripts</code>: common tasks that I can't be bothered to do manually</li> </ul>"},{"location":"reference/architecture/overview/#provisioning-flow","title":"Provisioning Flow","text":"<ul> <li>(1) Build the <code>./metal</code> layer:<ul> <li>Create an ephemeral, stateless PXE server</li> <li>Install Linux on all servers in parallel</li> <li>Build a Kubernetes cluster (based on k3s)</li> </ul> </li> <li>(2) Bootstrap the <code>./system</code> layer:<ul> <li>Install ArgoCD and the root app to manage itself and other layers<ul> <li>NB! From now on ArgoCD will do the rest</li> </ul> </li> <li>Install the remaining components (storage, monitoring, etc)</li> </ul> </li> <li>(3) Build the <code>./platform</code> layer (Gitea, Grafana, SSO, etc)</li> <li>(4) Deploy applications in the <code>./apps</code> layer</li> </ul> <pre><code>flowchart TD\n  subgraph metal[./metal]\n    pxe[PXE Server] -.-&gt; linux[Fedora Server] --&gt; k3s\n  end\n\n  subgraph system[./system]\n    argocd[ArgoCD and root app]\n    nginx[NGINX]\n    rook-ceph[Rook Ceph]\n    cert-manager\n    external-dns[External DNS]\n    cloudflared\n  end\n\n  subgraph external[./external]\n    letsencrypt[Let's Encrypt]\n    cloudflare[Cloudflare]\n  end\n\n  letsencrypt -.-&gt; cert-manager\n  cloudflare -.-&gt; cert-manager\n  cloudflare -.-&gt; external-dns\n  cloudflare -.-&gt; cloudflared\n\n  subgraph platform[./platform]\n    Gitea\n    Woodpecker\n    Grafana\n  end\n\n  subgraph apps[./apps]\n    homepage[Homepage]\n    jellyfin[Jellyfin]\n    matrix[Matrix]\n    paperless[Paperless]\n  end\n\n  make@{ shape: text, label: \"&lt;code&gt;make&lt;/code&gt;\" } -- 1 --&gt; metal -- 2 --&gt; system -. 3 .-&gt; platform -. 4 .-&gt; apps</code></pre>  Hold \"Alt\" / \"Option\" to enable Pan &amp; Zoom"},{"location":"reference/external/many_cfs_one_tunnel/","title":"Use cloudflared to expose a Kubernetes app to the Internet","text":"<p>Skip to content</p> <p>You can use Cloudflare Tunnel to connect applications and servers to Cloudflare's network. Tunnel relies on a piece of software, cloudflared \u2197, to create those connections.</p> <p>The same Tunnel can be run from multiple instances of <code>cloudflared</code>, giving you the ability to run many <code>cloudflared</code> replicas to scale your system when incoming traffic changes.</p> <p>In this tutorial, we will walk through running an application as a Kubernetes Service \u2197, and then running <code>cloudflared</code> in a separate Deployment \u2197.</p> <p>This architecture allows <code>cloudflared</code> instances to proxy Internet traffic into whichever Kubernetes Service it was configured to.</p> <p>This tutorial covers how to:</p> <ul> <li>Deploy <code>cloudflared</code> in a replica model</li> <li>Proxy traffic into a Kubernetes service with Tunnel</li> </ul> <p>Time to complete: 45 minutes</p>","tags":["clippings"]},{"location":"reference/external/many_cfs_one_tunnel/#install-cloudflared","title":"Install cloudflared","text":"<p>Start by downloading and installing the lightweight Cloudflare Tunnel daemon, <code>cloudflared</code>. Reference our installation guide for instructions on how to install <code>cloudflared</code> on your operating system.</p> <p>Once installed, you can use the <code>tunnel login</code> command in <code>cloudflared</code> to obtain a certificate.</p> <p>In the example below, simply change <code>&lt;example-tunnel&gt;</code> to the name you wish to assign to your Tunnel.</p> <pre><code>cloudflared tunnel create example-tunnel\n</code></pre> <pre><code>Tunnel credentials written to /Users/cf000197/.cloudflared/ef824aef-7557-4b41-a398-4684585177ad.json. cloudflared chose this file based on where your origin certificate was found. Keep this file secret. To revoke these credentials, delete the tunnel.\n\nCreated tunnel example-tunnel with id ef824aef-7557-4b41-a398-4684585177ad\n</code></pre> <p>Next, you will upload the generated Tunnel credential file as a secret to your Kubernetes cluster. You will also need to provide the filepath that the Tunnel credentials file was created under. You can find that path in the output of <code>cloudflared tunnel create &lt;example-tunnel&gt;</code> above.</p> <pre><code>kubectl create secret generic tunnel-credentials \\\n--from-file=credentials.json=/Users/cf000197/.cloudflared/ef824aef-7557-4b41-a398-4684585177ad.json\n</code></pre> <ol> <li>Go to the Cloudflare dashboard.</li> <li>Go to the DNS tab.</li> <li>Now create a CNAME targeting <code>.cfargotunnel.com</code>. In this example, the tunnel ID is ef824aef-7557-4b41-a398-4684585177ad, so create a CNAME record specifically targeting <code>ef824aef-7557-4b41-a398-4684585177ad.cfargotunnel.com</code>.</li> </ol> <p>You can also create multiple CNAME records targeting the same Tunnel, if desired.</p> <p>Alternatively, you can perform this step from the command line by running <code>cloudflared tunnel route dns &lt;tunnel&gt; &lt;hostname&gt;</code>. For example, <code>cloudflared tunnel route dns example-tunnel tunnel.example.com</code>. You can use a similar method to route traffic to <code>cloudflared</code> from a Cloudflare Load Balancer \u2197, see docs for details.</p>","tags":["clippings"]},{"location":"reference/external/many_cfs_one_tunnel/#deploy-cloudflared","title":"Deploy cloudflared","text":"<p>Now, we'll deploy <code>cloudflared</code> by applying its manifest \u2197. This will start a Deployment \u2197 for running <code>cloudflared</code> and a ConfigMap \u2197 with <code>cloudflared</code> 's config. When Cloudflare receives traffic for the DNS or Load Balancing hostname you configured in the previous step, it will send that traffic to the <code>cloudflared</code> instances running in this deployment. Then, those <code>cloudflared</code> instances will proxy the request to your application's Service \u2197.</p> <pre><code>kubectl apply -f cloudflared.yaml\n</code></pre> <pre><code>deployment.apps/cloudflared created\nconfigmap/cloudflared configured\n</code></pre> <pre><code>$ kubectl get pods\n    NAME                                  READY   STATUS    RESTARTS   AGE\n    cloudflared-57746f77fd-frc99          1/1     Running   0          12m\n    cloudflared-57746f77fd-xht8n          1/1     Running   0          12m\n    httpbin-deployment-67f749774f-42tqj   1/1     Running   0          20h\n    $ kubectl logs $(kubectl get pod -l app=cloudflared -o jsonpath=\"{.items[0].metadata.name}\")\n    2021-05-04T17:39:49Z INF Starting tunnel tunnelID=ef824aef-7557-4b41-a398-4684585177ad\n    2021-05-04T17:39:49Z INF Version\n    2021-05-04T17:39:49Z INF GOOS: linux, GOVersion: go1.15.7, GoArch: amd64\n    2021-05-04T17:39:49Z INF Settings: map[config:/etc/cloudflared/config/config.yaml cred-file:/etc/cloudflared/creds/credentials.json credentials-file:/etc/cloudflared/creds/credentials.json metrics:0.0.0.0:2000 no-autoupdate:true]\n    2021-05-04T17:39:49Z INF Generated Connector ID: 4c5dc5d3-8e10-480e-ac74-e385e591553e\n    2021-05-04T17:39:49Z INF Initial protocol h2mux\n    2021-05-04T17:39:49Z INF Starting metrics server on [::]:2000/metrics\n</code></pre> <p>At this point, you'll see the httpbin welcome page.</p> <p>In this tutorial, we've covered how the same Tunnel can be run in many <code>cloudflared</code> processes. You can also use this knowledge to support elastic scaling, graceful <code>cloudflared</code> restarts, and rolling upgrades in the future.</p> <p>We love to hear your feedback! Join the discussion in our community \u2197.</p>","tags":["clippings"]},{"location":"reference/external/self_host_an_automated_jellyfin_media_streaming_stack/","title":"Self-host an automated Jellyfin media streaming stack","text":"<p>Self-hosting a media stack on your own personal server gives you full privacy and complete control over your data.</p> <p>This guide will teach you how to set up a media stack on Linux using only Free Open Source Software.  </p> <p>By following this post you will end up with a system ready to handle requests, downloads, and streaming of your favorite content (be it movies, tv shows, or anime) right at home, on your local network. And hopefully you will learn something new too!  </p> <p>Note that you can further improve this setup based on your own needs, like running Transmission behind a VPN, or opening Jellyfin and Jellyseerr to the internet. While these are not covered here, this guide will serve as a solid base if you ever want to enhance its capabilities.</p> <p>DISCLAIMER: This article serves educational purposes only.</p> <p>Now then, let's start!</p>","tags":["clippings"]},{"location":"reference/external/self_host_an_automated_jellyfin_media_streaming_stack/#requirements","title":"Requirements","text":"<ul> <li>Basic Linux and Docker (Docker Compose) knowledge</li> <li>A Linux server (I recommend at least 4GB of RAM)</li> <li>Enough storage to store your media</li> </ul>","tags":["clippings"]},{"location":"reference/external/self_host_an_automated_jellyfin_media_streaming_stack/#media-stack","title":"Media Stack","text":"<p>All of the listed software is Free and Open Source.</p> <ul> <li>Jellyfin - streams media from the server to different clients</li> <li>Sonarr - manages TV shows (and anime) and sends requests to Jackett</li> <li>Radarr - manages movies and sends requests to Jackett</li> <li>Jackett - parses results coming from Radarr and Sonarr and finds available torrents for such media</li> <li>Transmission - torrent client to download media</li> <li>Jellyseerr - webapp for users to discover and request movies and TV shows</li> <li>Bazarr - scans available media and downloads subtitles for it</li> </ul>","tags":["clippings"]},{"location":"reference/external/self_host_an_automated_jellyfin_media_streaming_stack/#how-does-this-work","title":"How does this work?","text":"<ul> <li>Users browse and discover movies and TV shows in Jellyseerr.</li> <li>Once they request a movie or TV show, Jellyseerr sends a query to Radarr and Sonarr respectively, which finds movies/shows by scraping on The Movie Database (TMDb).</li> <li>Radarr/Sonarr in turn sends a query to Jackett to look for the movies/shows in torrent indexers.</li> <li>Once a movie or TV show with all the requirements met is found in a torrent indexer, Radarr/Sonarr sends the magnet link to Transmission to download the movie from the torrent network.</li> <li>Once Transmission downloads the movie, it creates a hard link in the specified directories of Radarr/Sonarr.</li> <li>Bazaar scans those directories, then finds and downloads subtitles for the new movies/shows it finds after looking for them in famous subtitles websites.</li> <li>In the same way, Jellyfin periodically scans those directories as well and adds the new movies/shows to the correct library so that they can be streamed on multiple devices.</li> </ul> <p>Here is a simplified flowchart I made which should explain this fairly easily:</p> <p></p>","tags":["clippings"]},{"location":"reference/external/self_host_an_automated_jellyfin_media_streaming_stack/#alternatives","title":"Alternatives","text":"<p>Jackett alternative:Prowlarr. Unfortunately I found that it lacked support of Torrent indexers for foreign languages and decided to go with Jackett. If you intend to only download movies and shows in english then this won't be a problem.</p> <p>Jellyseerr alternative:Ombi. It features a smartphone app, but it is paid and each user would have to pay for it. You could connect to the the webapp using a browser just like you would with Jellyseerr, however I find the interface to be very bad on small screens and it seems to have worse suggestions in my experience.</p> <p>Transmission alternative: Any other torrent client. I tried qBittorrent before Transmission, but for some reason I couldn't login when using certain browsers.</p> <p>I still encourage you to try these alternatives for yourself, especially because they may have gotten better since the time of writing this.</p>","tags":["clippings"]},{"location":"reference/external/self_host_an_automated_jellyfin_media_streaming_stack/#setting-up-docker","title":"Setting up Docker","text":"<p>You must have both Docker and Docker Compose installed on your server.</p> <p>Depending on your Linux distribution, you can follow the installation instructions on the official website.</p> <p>If you're lazy and have a Debian-based server, you can use Dockeraise, a script written by me (shameless self-promotion time!) to quickly install and configure <code>docker</code> and <code>docker-compose</code>.</p> <p>If you want to go with the latter, you can use this command:</p> <pre><code>wget -qO- https://raw.githubusercontent.com/Zerodya/dockeraise/main/dockeraise.sh | bash\n</code></pre>","tags":["clippings"]},{"location":"reference/external/self_host_an_automated_jellyfin_media_streaming_stack/#creating-the-containers","title":"Creating the containers","text":"<p>Now that Docker is installed, it's time to actually create our containers.</p> <p>For this, I actually chose to divide the stack in two parts:</p> <ul> <li>Streaming stack: Jellyfin, Sonarr, Radarr, Bazarr, Jellyseerr.</li> <li>Downloading stack: Jackett, Transmission.</li> </ul> <p>Creating the containers is quite simple:</p> <ol> <li>Create two directories, one for each stack.</li> <li>Create a file called docker-compose.yml in both directories.</li> <li>Copy and paste the configurations below in each file.     (You can also get them from my GitHub repo)</li> </ol> <p>(If you don't know where to create these directories, a good tradition is to put them inside the <code>/srv/</code> directory. So you will have <code>/srv/streaming-stack/</code> and <code>/srv/downloading-stack/</code>)</p> <p>Make sure to customize them in a way that suits your needs, such as changing the timezone (TZ).</p> <p>Note: If you want to use Transmission behind a VPN use the docker-compose file of the docker-transmission-openvpn project, then configure the VPN as explained in their documentation. Another interesting project about VPN in a container is Gluetun.</p> <pre><code>version: \"3\"\nservices:\n  jellyfin:\n    image: jellyfin/jellyfin\n    container_name: jellyfin\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Europe/Rome\n    volumes:\n      - ./jellyfin_config:/config\n      - /media/tvshows:/data/tvshows\n      - /media/movies:/data/movies\n      - /media/anime:/data/anime\n    ports:\n      - 8096:8096\n    restart: unless-stopped\n\n  sonarr:\n    image: linuxserver/sonarr\n    container_name: sonarr\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Europe/Rome\n    volumes:\n      - ./sonarr_config:/config\n      - /media/anime:/anime\n      - /media/tvshows:/tvshows\n      - /media/transmission/downloads/complete:/downloads/complete\n    ports:\n      - 8989:8989\n    restart: unless-stopped\n\n  radarr:\n    image: linuxserver/radarr\n    container_name: radarr\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Europe/Rome\n    volumes:\n      - ./radarr_config:/config\n      - /media/transmission/downloads/complete:/downloads/complete\n      - /media/movies:/movies\n    ports:\n      - 7878:7878\n    restart: unless-stopped\n\n  bazarr:\n    image: linuxserver/bazarr\n    container_name: bazarr\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Europe/Rome\n    volumes:\n      - ./bazarr_config:/config\n      - /media/movies:/movies #optional\n      - /media/tvshows:/tvshows #optional\n      - /media/anime:/anime\n    ports:\n      - 6767:6767\n    restart: unless-stopped\n\n  jellyseerr:\n    image: fallenbagel/jellyseerr:develop\n    container_name: jellyseerr\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - LOG_LEVEL=debug\n      - TZ=Europe/Rome\n    ports:\n      - 5055:5055\n    volumes:\n      - ./jellyseerr_config:/app/config\n    restart: unless-stopped\n    depends_on:\n      - radarr\n      - sonarr\n</code></pre> <p>docker-compose.yml (Streaming stack)</p> <pre><code>version: \"2.1\"\nservices:\n  jackett:\n    image: linuxserver/jackett\n    container_name: jackett\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Europe/Rome\n      - AUTO_UPDATE=true #optional\n    volumes:\n      - ./jackett:/config\n      - /media/jackett/downloads:/downloads\n    ports:\n      - 9117:9117\n    restart: unless-stopped\n\n  transmission:\n    image: linuxserver/transmission\n    container_name: transmission\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Europe/Rome\n    volumes:\n      - ./transmission:/config\n      - /media/transmission/downloads:/downloads\n    ports:\n      - 9091:9091\n      - 51413:51413\n      - 51413:51413/udp\n    restart: unless-stopped\n</code></pre> <p>docker-compose.yml (Downloading stack)</p> <p>Now that the docker-compose files are ready, run the following command in both directories:</p> <pre><code>docker-compose up -d\n</code></pre> <p>Once both stacks have been downloaded, run:</p> <pre><code>docker ps\n</code></pre> <p>You should see each service up and running, along with their respective port number.</p> <p></p> <p>To access and manage each service, open your browser and navigate to your server internal IP address followed by the port number of the service like so:</p> <p></p> <p>In my case the server IP address is <code>192.168.1.120</code> so to access Jellyfin at port <code>8096</code> I will navigate to <code>192.168.1.120:8096</code>. If you're working on your server remotely you should already know your server IP address.</p> <p>If you are hosting this on your local machine, it will be <code>localhost</code> instead. In this example you would have to navigate to <code>localhost:8096</code>.</p>","tags":["clippings"]},{"location":"reference/external/self_host_an_automated_jellyfin_media_streaming_stack/#permissions","title":"Permissions","text":"<p>If you haven't noticed, the services in the <code>docker-compose.yml</code> files above have the <code>PUID=1000</code> and <code>PGID=1000</code> environment variables. This means that the directories used by the services should be both read-able and write-able by a user with UID and GID of 1000.</p> <p>The best way proceed is to create a new Docker user (that we will call <code>dockeruser</code>) with the following command:</p> <pre><code>groupadd -g 1000 dockeruser &amp;&amp; useradd dockeruser -u 1000 -g 1000 -s /bin/bash\n</code></pre> <p>NOTE: if you are an unprivileged user, you will have to put <code>sudo</code> in front of both <code>groupadd</code> and <code>useradd</code>.</p> <p>Now that we have a user with the correct UID and GID, we only need to make sure it has read and write permissions over the right directories.</p> <p>You can do this with the following command:</p> <pre><code>chown -R dockeruser:dockeruser /srv/streaming-stack /srv/downloading-stack /media\n</code></pre> <p>NOTE: Change <code>/srv/streaming-stack</code> and <code>/srv/downloading-stack</code> if you put your <code>docker-compose.yml</code> files in different directories.</p>","tags":["clippings"]},{"location":"reference/external/self_host_an_automated_jellyfin_media_streaming_stack/#configuration","title":"Configuration","text":"<p>Now that the services are up and running, we need to configure them so that they are able to work with each other in an automated way.</p> <p>Each service section contains a link to its own wiki in case you want to dig deeper into the possible configuration settings.</p>","tags":["clippings"]},{"location":"reference/external/self_host_an_automated_jellyfin_media_streaming_stack/#jellyfin","title":"Jellyfin","text":"<p>Navigate to Jellyfin (port 8096) and you will be prompted with a quick setup tour.</p> <p>Choose your preferred language, then set the admin username and password. It will then ask if you want to import your media library. Skip this and click next on the following prompts.</p> <p>Once you login, click on the three bars in the top-left corner and go to <code>Dashboard</code>; this is where you are able to configure Jellyfin.</p> <ol> <li>Add guest user - Go to <code>Users</code> on the left side panel, click the [+] button and create a new guest user which will be the one your family/friends will use. </li> </ol> <p>2.\u2003Add media libraries - Go to <code>Libraries</code>, click on <code>Add Media Library</code>, choose the content type 'Movies', then choose the folder <code>/data/movies</code> and select your preferred language. You can leave the other options as default.</p> <p></p> <p>Now create two more libraries, but instead of 'Movies' choose 'Shows' for both of them.</p> <p>For the TV Shows library choose the <code>/data/tvshows</code> folder. For the Anime library choose the <code>/data/anime</code> folder and Japanese as the preferred language.</p>","tags":["clippings"]},{"location":"reference/external/self_host_an_automated_jellyfin_media_streaming_stack/#jackett","title":"Jackett","text":"<p>Open Jackett (port 9117) and click on the <code>Add indexer</code> button. You will see a list of the indexers available:</p> <p></p> <p>Choose your indexers and add them by clicking on the [+] button.</p> <p>Optional: Scroll down and set an admin password.</p>","tags":["clippings"]},{"location":"reference/external/self_host_an_automated_jellyfin_media_streaming_stack/#sonarr-and-radarr","title":"Sonarr and Radarr","text":"<p>Radarr is a fork of Sonarr so they are both very similar. For this reason I will only show you how to configure Sonarr (port 8989), since mostly the same will also apply to Radarr (port 7878).</p> <p>While following this, keep in mind that Radarr is for movies and Sonarr is for TV shows and anime.</p> <ol> <li>Add download client - Go to <code>Settings &gt; Download Clients</code> and click on the big [+] button.     In the next section choose Transmission and configure it like this.     Click Test and if successful, save. </li> </ol> <p>2. Add indexers - Go to <code>Settings &gt; Indexers</code> and click on the big [+] button. In the next section choose Torznab. Go to Jackett and copy-paste both the Jackett API key and the Indexer Torznab feed URL.</p> <p>Click 'Test' and you should see various tags in the 'Categories' drop-down list; choose shows/anime related tags for Sonarr, and movie related tags for Radarr.</p> <p></p> <p></p> <p>Save and repeat Step 2 for every indexer you added in Jackett.</p> <p>3. Add directories - Go to <code>Settings &gt; Media Management</code> and click on the blue <code>Add Root Folder</code> button. Add <code>/anime</code> and <code>/tvshows</code> for Sonarr, and <code>/movies</code> for Radarr.</p> <p>4. Add authentication (Optional) - Go to <code>Settings &gt; General</code> and choose an authentication method in the Security section, then set username and password.</p>","tags":["clippings"]},{"location":"reference/external/self_host_an_automated_jellyfin_media_streaming_stack/#jellyseerr","title":"Jellyseerr","text":"<p>Open Jellyseerr (port 5055) and you will be introduced with a quick-start tour. Choose to login with your Jellyfin account and type your username and password (email can be anything).</p> <p>In the next section click on the <code>Sync Libraries</code> button and the libraries you added in Jellyfin should appear; select all of them.</p> <p>In the final section you will be asked to add both a Radarr and a Sonarr server. Configure Radarr like in the picture below (Sonarr will be fairly similar but aimed around TV shows and anime).</p> <p>You will find the API key of each service by going to Sonarr/Radarr, in <code>Settings &gt; General</code> under the Security section.</p> <p></p> <p>Once you finish the setup you will be able to freely configure Jellyseerr further.</p> <ol> <li>Add users - Go to <code>Users</code> on the left side panel and you can either import users from Jellyfin or create local Jellyseerr users by clicking on the <code>Create Local User</code> button.     The latter is what you want to do if you only have one Jellyfin guest user but want multiple Jellyseerr users so the requests come from different accounts.</li> <li>Set language - On the left side panel, go to <code>Settings &gt; General</code> and change the display language if your users speak a different language than english.     You can also change the discover region and discover language, however I recommend to leave these to their defaults.</li> <li>Set user permissions - Go to <code>Settings &gt; Users</code> and change the permissions as you see fit.     I recommend enabling <code>Request</code> and <code>Manage Requests</code> so that users have their requests automatically approved, can modify them, and can see how the download is going.</li> </ol> <p>All there's left to do is to give the newly made account credentials to your users so they can start making requests.</p>","tags":["clippings"]},{"location":"reference/external/self_host_an_automated_jellyfin_media_streaming_stack/#bazarr","title":"Bazarr","text":"<p>Open Bazarr (port 6767) and follow these steps.</p> <ol> <li>Add Sonarr and Radarr - On the left side panel, go to <code>Settings &gt; Sonarr</code> and add the Sonarr API key; you will find it by going to Sonarr, in <code>Settings &gt; General</code> under the Security section.     Do the same for Radarr in <code>Settings &gt; Radarr</code>. </li> </ol> <p>2. Choose language - Go to <code>Settings &gt; Languages</code> and add the languages you want in the <code>Languages Filter</code> input bar. Then click on the <code>Add New Profile</code> button, give it a name, click on the <code>Add Language</code> button and select your language, finally save.</p> <p></p> <p>3. Add a subtitles provider - Go to <code>Settings &gt; Providers</code>, click on the big [+] button and choose a provider; I recommend going with OpenSubtitles.org. Insert username and password of your provider account (you have to create one on the website of the provider first).</p> <p>4. Enable subtitles - \u00a0On <code>Settings &gt; Languages</code> you will find a section called 'Default Settings'. Here you can toggle 'Series' and/or 'Movies' based on if you want subtitles to be downloaded only for series or only for movies, or for both.</p>","tags":["clippings"]},{"location":"reference/external/self_host_an_automated_jellyfin_media_streaming_stack/#maintaining","title":"Maintaining","text":"<p>The media stack is now ready and good to go. But one last thing to know before leaving is how to update the services in the future.</p> <p>You can update a stack of services by going inside its directory (E.g. <code>/srv/streaming-stack</code>) and running:</p> <pre><code>docker-compose up -d\n</code></pre> <p>This will stop the services, download the latest images, and then install them.</p> <p>However you can download the latest images before docker-compose stops the services, resulting in a much shorter downtime.</p> <p>After updating it's also recommended to get rid of old images to save disk space, therefore the following list of commands is the best way to update your stacks in the future:</p> <pre><code>docker-compose pull # Downloads the latest images available\ndocker-compose up -d # Updates the services by installing the just downloaded images\ndocker image prune -f # Deletes old images to save disk space\n</code></pre>","tags":["clippings"]},{"location":"reference/external/self_host_an_automated_jellyfin_media_streaming_stack/#wrapping-up","title":"Wrapping up","text":"<p>Congratulations for making it this far! I hope that this guide introduced you to the world of self-hosting, or, if you were already familiar with it, that you could learn something new from it.</p> <p>If you have any questions or doubts feel free to leave a comment down below.</p> <p>If you found this guide useful and you want to follow the next posts, you can add my RSS feed to your favorite reader app.</p>","tags":["clippings"]}]}